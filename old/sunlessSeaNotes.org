* Sunless Sea / Fallen london
** Question's You can ask
   
 Q.what //state
  .why //reason / history
  .where //location
  .when //time
  .will //schedule boolean

  .should //deontics
  .must
  .could
  .does

** Statements

   noun.is.description."something"
          .state.physical
          .state.deontical
          .changing.from.state
          .changing.to.state
          .schedule
          
* Kentucky Route Zero
** Act Three Scene 2
   Question - Nothing to be done? (subtext: about the truck not running)
   Answer - Just won't start up again. <statement> 

   root.truck.state.runnable!%{true,false}

   quips.check.on.truck->quip(S,T)
   quip?root.truck.state.runnable!true
   quip."Nothing to be done?"
   quip >> print(S,quip)
   quip.response.success."It'll take a minute"
   quip.response.failure."It seems to be broken."
   quip+ >> print(T,quip.response.success)
   quip- >> print(T,quip.response.failure)
   
* Editor thoughts
  The CLI shell could be similar to an adaptive text editor, using EL more. 
  Black on White, continuing sentence, showing parent options, giving the
  breadth of options at each selected node. 

  this.is.an.example         //EL description
            .other.example   //python style indentation
            .(an >> a).test  //ability to transform the previous entry for printing?
         .not.difficult      //(a parameterless bind ie: Monads and Haskell)
      .could.be.different
  The Above could be the entire tree. Transformed to:
  
  this.is.an.example  //current node
            .other    //other option at the branch from current parent
            ..test    //indicate when there is a transform, that can be expanded
         .not         //parent->parent options etc
      .could          //consider an emacs mode to align tabs internal to 
                      //a sentence together

  Even consider cross-edges with another syntax:
  this.is.an.example.book
         .not >>= (this.is).an... //parameter based bind,
                                //with a ... based rest cross edge
  
  *this* as a placeholder for calling object?

  place.people.bob
              .bill

  place.people::Person //dataType for all child nodes

  Person.states //dataType requirements
  Person.functions
  Person.functions.example1
  Person::(Alive,Physical) //Typeclass requirements
  
  //A Rule / function definition 

  function->F     //bind a value till empty line? 
  F.example1(A,B) // passed in from calling function
  F.example1.A::Person // specify a datatype/typeclass for the binding
  F.example1?     // Fact base queries and bindings
  F.example1?A.something //tests the bound A
  F.example1?places.X //bind a value from a query 
  F.example1?places.X::Location //enforce a datatype/typeclass for the subbinding
  F.example1 >> F.exampleB  // monadic sequence, parameterless
  F.example1 >>= function.example3(A,X) //pass params, concat precons, not bindings
  F.example1 >> function.example2 //run priority is based on position/lineNum
  F.example1 >< function.example3 //parallelize
  F.example1.A <- function.example4 // bind return values
  F.example1.(B,C,_) <- function.example5 // return patterns
  F.example1.B <-< function.example6  //first past the post paral
  F.example1.B <-< function.example7 
  F.example1 +     // Assertions on true
  F.example1 -     // Retractions on true
  F.example1 !     // when false
  F.example1 !>    // eg: when false, run function
  F.example1 := (A,B,C)  // return a value or pattern of bindings
  


* Speech Act Reference

** representative
inform, deny, affirm, confirm.
a truth statement
** directive
command, invite, ask, beg
influence the intention and behaviour of other
** commissive
promise, commit
self commitment to future action or state
** expressive
description of self psychological state 
** declarative
statement of redefinition

* Speech act example
"Hello {T.name}, how are you?"
  .id.greet1
  .greet
  .request!{T}.status
  conversation.stack.push.{T}
  

"Why hello {T.name}, ${quip.sayStatus}"
"${quip.sayStatus}"
  .responseTo.greet1

"I am {Self.status}"
  .provide:Self.status
  .expressive
  .sayStatus
  
"I couldn't be better"
  .precondition:Self.status.happy
  .provide:Self.status
  .expressive
  .sayStatus

"I am angry at ${X}"
  .precondition:Self.status.angry.at.X
  .provide:Self.status
  .expressive
  .sayStatus
  
self.status = happy | sad | angry | bored

