--------------------
Vector Math
--------------------


//Euclidean vector
//See shiffman, nature of code, for more
an entity with magnitude and direction
can be represented as two points

//Vector addition:
Vectors w, u, and v.
w = u + v;
  //Or:
  w(x) = u(x) + v(x);
  w(y) = u(y) + v(y);

//subtraction works similarly

//Multiplication by a scalar is scaling
w = →u * n
//same as:
       wx = ux * n 
       wy = uy * n

//Magnitude:
mag(v) = sqrt( vx^2 + vy^2 )

//Normalization:
norm(v) = v / mag(v)

//Distance:


//Dot:
//two vectors -> scalar
dot(a,b) = ax * bx + ay * by
dot(a,b) = mag(a) * mag(b) * cos(theta)

so:
ax * bx + ay * by = mag(a) * mag(b) * cos(theta)
cos(theta) = dot(a,b) / (mag(a) * mag(b))
theta = arccosine((dot,a,b) / (mag(a) * mag(b)))




//Cross:


//Rules:
The commutative rule: →u + →v = →v + →u
The associative rule: →u + (→v + →w) = (→u + →v ) + →w
//ie:common sense properties of addition apply to vectors as well.

The associative rule: (n*m)*→v = n*(m*→v)
The distributive rule with 2 scalars, 1 vector:(n*m)*→v=n*→v+m*→v
The distributive rule with 2 vectors, 1scalar: (→u+→v)*n=→u*n+→v*n

