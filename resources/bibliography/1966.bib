@book{berger66_social_const_realit,
 author       = {Berger, Peter L. and Luckmann, Thomas},
 file         = {1966/Berger/Berger_1966_The_Social_Construction_of_Reality_A_Tr.pdf},
 publisher    = {Penguin Books},
 tags         = {institutionalisation,internalization,legitimation,meaning,social_construction,social_structure,sociology},
 title        = {The Social Construction of Reality: A Treatise in the Sociology of Knowledge},
 year         = {1966},
}



@misc{douglas66_harper_virgin_board_elect_,
 author       = {William O. Douglas},
 dissenting   = {Harlan},
 file         = {1966/Douglas/Douglas_1966_Harper_v_Virgina_Board_of_Elections.pdf},
 tags         = {SCOTUS,judicial_opinion,judiciary,poll_tax,voting_rights},
 title        = {Harper v Virgina Board of Elections},
 year         = {1966},
}



@book{la66_satan_bible,
 abstract     = {A founder of the Church of Satan explains its philosophies of indulgence and freedom, and discusses Satanic rituals.},
 author       = {La Vey, Anton Szandor},
 file         = {1966/La/La_1966_The_Satanic_Bible.pdf},
 isbn         = {9780380015399},
 pages        = {272},
 publisher    = {n.d},
 tags         = {ritual,sanction,satanism},
 title        = {The Satanic Bible},
 year         = {1966},
}



@article{landin66_next_progr_languag_9,
 abstract     = {A family of unimplemented computing languages is described that is intended to span differences of application area by a unified framework. This framework dictates the rules about the uses of user-coined names, and the conventions about characterizing functional relationships. Within this framework the design of a specific language splits into two independent parts. One is the choice of written appearances of programs (or more generally, their physical representation). The other is the choice of the abstract entities (such as numbers, character-strings, list of them, functional relations among them) that can be referred to in the language. The system is biased towards "expressions" rather than "statements." It includes a nonprocedural (purely functional) subsystem that aims to expand the class of users' needs that can be met by a single print-instruction, without sacrificing the important properties that make conventional right-hand-side expressions easy to construct and understand.},
 author       = {Landin, P. J.},
 doi          = {10.1145/365230.365257},
 file         = {1966/L/L_1966_The_Next_700_Programming_Languages.pdf},
 issn         = {0001-0782},
 journal      = {Communications of the ACM},
 number       = {3},
 pages        = {157--166},
 tags         = {__printed,calculus,game,monad,paper,parser,programming,programming_language_theory,rule,theory},
 title        = {The Next 700 Programming Languages},
 url          = {http://doi.acm.org/10.1145/365230.365257},
 volume       = {9},
 year         = {1966},
}



@misc{warren66_miran_arizon,
 author       = {Earl Warren},
 dissenting   = {White},
 file         = {1966/Warren/Warren_1966_Miranda_v_Arizona.pdf},
 tags         = {SCOTUS,arizona,judicial_opinion,judiciary,miranda_rights,police,police_interrogation},
 title        = {Miranda v Arizona},
 url          = {http://cdn.loc.gov/service/ll/usrep/usrep384/usrep384436/usrep384436.pdf},
 year         = {1966},
}

