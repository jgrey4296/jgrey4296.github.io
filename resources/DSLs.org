* DSLs and Logics
** DSLs
*** ABL                                                                         :behaviours:
    cite:anon15ABL

    initial_tree,
    acts, sensors
    sequential/parallel/joint behaviours
    preconditions,
    success/failure tests
    subgoals
    persistence,
    specificity

*** ADICO                                                                       :rules:norms:
    cite:siddiki2019institutional
    cite:Frantz2014

    Attributes,
    Deontic
    Aims,
    Conditions
    Or Else

*** AgentSpeak                                                                  :behaviours:

    predicate logic + annotations for beliefs:
    busy(john)[expires(autumn)]

    datalog rules and plans:
    @label triggering_event : context <- body

    declarative goals: !achievement and ?test

    triggering events can be + or - beliefs, achievement or test goals

*** TODO Archipoff2016                                                          :frp:
*** AspectJ                                                                     :aop:

    join points : standard points in code which can be latched on to
    pointcuts   : collections/queries of join points
    advice      : code to run around selected pointcut
    aspect      : collection of pointcuts and advice

*** BDL (Gemrot2017)                                                            :FSM:behaviours:

    Decision point tree manipulation

*** [[http://bloom-lang.net/features/][bloom]]                                                                       :concurrent:
    [[https://github.com/bloom-lang/bud/blob/master/docs/cheat.md][Bud Language Reference]]
**** CALM: Consistency as Logical Monotonicity
**** "Gray's Twelfth Challenge"
     DWIM : Do What I Mean
     Spec Language that:
     1) Is Easy to express designs
     2) Is Compilable
     3) Can describe all applications

     System should 'reason' about application:
     Ask about exception cases
     Ask about incomplete specification
     Not be onerous

**** Borges "A New Refutation of Time"
     "The Denial of time involves two negations: The negation of the succession
     of the terms of a series, negation of the synchronism of the terms in two
     different series"

**** Disorderly programming and datastructures
*** TODO Bootstrapping (Konat2016)                                              :meta:
*** Buzz                                                                        :swarm:robotics:

    Dynamic Swarm management. Creation, leaving, tasks.
    Neighbour operations
    Iteration, Transformation/Filtering, Reduction
    Virtual Stigmergy - global data sharing

*** C+                                                                          :logic:

    Actions, Fluents, InertialFluents

*** Ceptre                                                                      :linear_logic:

    Datalog rules
    replacement semantics
    Linear Logic: conjoin predicates with *,
    replace with -o
    ! indicates permanent state

    predicates can be resources. ie: multiple of the same predicate has meaning.
    (think resources in cultist simulator)

    uniform non-determinism.

    has stages of rule groups.

*** ChucK                                                                       :time:music:
    Requirements for First Class Time (see Lee):
    1) ability to express timing constraints
    2) timed communication
    3) enforcement of timing constraints
    4) tolerance of violations and constraints
    5) maintaining consistency in real time distributed systems
    6) static timing verification

    chuck operator =>
    signal flow
    controllable time progression

    time and duration types.

*** CLIPS                                                                       :rules:

    Standard Rule language with agendas.

*** Converge (tratt2007evolving)                                                :embedding:

    DSL embedding with compile-time macros,
    ability to turn off variable hygiene

*** TODO COOL                                                                   :MAS:coordination:
*** TODO ELMS                                                                   :environment:MAS:
*** TODO Erlang                                                                 :FSM:concurrent:
*** TODO Exclusion Logic                                                        :exclusion:FSM:
*** TODO Grammar Zoo (Zaytsev2015)                                              :review:
*** TODO Guidelines (Karsai2014)                                                :guidelines:
*** TODO HLBL                                                                   :behaviours:
*** TODO Hyper                                                                  :types:
*** TODO Input/Ouput Logic                                                      :layers:
*** TODO InstAL                                                                 :logic:
*** TODO Language Workbench comparison (Erdweg2013)                             :meta:
*** TODO LARA                                                                   :aop:
*** TODO Petricek2017a                                                          :dot:context:
*** TODO POAPS (lin2016)                                                        :MDP:
*** TODO PROB (gordon2014probabilistic)                                         :probability:
*** TODO Rascal                                                                 :lisp:meta:
*** TODO Reo                                                                    :time:concurrent:
*** TODO SIMPLE                                                                 :protocol:
*** TODO Siren                                                                  :pattern:time:music:
*** TODO SOAR                                                                   :chunking:
*** TODO Stan                                                                   :probability:
*** TODO Tidal                                                                  :pattern:time:music:
*** TODO Tracery                                                                :text:
** TODO Logics
*** Abductive Logic
*** Acceptance Logic
*** Action Logic
*** Adaptive Deontic Logic
*** Adaptive Logic
*** Agent Organization Logic
*** Alternating Temporal Logic
*** BDI STIT Logic
*** Branching Time Logic
*** CHBDO Logic
*** Coalition Logic
*** Combinatory Logic
*** Computational Logic
*** Connective Action Logic
*** Context Logic
*** CTL*
    Emerson and Halpern
*** Cultural Logic
*** Defeasible Logic
**** [[http://defeasible.org/][Defeasible Logic]]
*** Delegation Logic
*** Deontic Logic
*** Dependence Logic
*** Description Logic
*** Dialogue Logic
*** Economic Logic
*** Emerging Logic
*** Epistemic Logic
*** Exclusion Logic
*** Failure Logic
*** Fuzzy Logic
*** General Awareness Logic
*** Herbrand Logic
*** Hybrid Logic
*** Ignorance Logic
*** Imperative Logic
*** Inductive Logic
*** Institutional Logic
*** Interaction Logic
*** Intuitionistic Logic
*** IO Logic
*** Linear Logic
*** Linear Temporal Logic
*** Logic for Contract Representation
    see [[*OperA][OperA]]

    CTL* -> Deontic -> Stit


    :CTL_Operators:
    A (Always in the future)
    S (Since)
    X (In the next state, on all paths)
    U (Until)
    <= (before)
    E (stit) ie: Eₐφ
    :END:

    Branching Time Structure: 
    W : a set of worlds
    R ⊆ W x W : Successor relation on states. 

    Controllable propositions:
    Cₐ : Controllable propositions for agent a.
    C*ₐ: Uncontrollable propositions for agent a.

    Deontics:
    Obligations,
    Violations

*** Mathematical Logic
*** Modal Logic
*** Neighbourhood Logic
*** Normative Logic
*** Operational Logic
*** Order Sorted Logic
*** Ordered Choice Logic
*** Procedural Logic
*** Propositional Dynamic Logic
*** Rational Agency Logic
*** Social Logic
*** Spatial Logic
*** STIT Logic
*** Temporal Logic
*** Tool Logic
** TODO Calculi
*** Coeffect Calculus
*** Concurrent Layer Calculus
*** Event Calculus
*** Object Calculus
*** Record Calculus
*** Sequent Calculus
*** Situation Calculus
*** λ Calculus
*** π Calculus
*** ρ Calculus
** TODO Frameworks
*** 2APL
*** 2OPL
*** 3APL
*** ACT-IF
*** ADICO
*** ADICO
*** AGRE
*** ANTLR
*** BDI
*** BOD
*** BOID
*** BORG
*** C Plus
*** CADIA Populus
*** CArtAgO
*** CBR
*** DESIRE
    Brazier 1997
*** DETT
*** DReAM
*** FAtiMA
*** FFIPS
*** FIPA
*** FSM
*** GAIA
    Wooldridge 2000
*** garbage can model
*** HTN
*** IAD
*** KQML
*** L.I.A.R
*** MAPL
*** Markov Models
*** MASSIVE
    Lind 2001
*** MHP
*** MOISE
    cite:Hubner2002 (see for good diagram, page 2)
    
    Multiple specifications:
    1) Organizational Structure
    2) Functional Structure
       - Missions and plans
       - Uses a social scheme / goal decomposition tree
       - 
    3) Deontic Structure
       - Permissions
       - Obligations
       - Prohibitions
    4) Structural Specification
       - Individual level roles
       - Social level links
       - Collective level compatibility constraints
*** MONAD
*** Netlogo
*** OperA

    "An Opera model can be thought of as a kind of abstract protocol that
    governs how member agents should act according to social requirements."

    [[*Logic for Contract Representation][Logic for Contract Representation]]

    Distinguishes between mechanisms describing structure and global behaviour,
    and mechanisms for aims and behaviour of agents.


    Three main models:
    1) (OM) Organizational model
       - (SS) Social Structure (Objectives, roles, coordination model)
       - (IS) Interaction Structure (interaction moments, scripts, tasks, partial ordering of scene scripts)
       - (NS) Normative Structure (role and interaction norms)
       - (CS) Communicative Structure (domain and communication ontologies)
    2) (SM) Social model
       - Social Contracts
       - (REA) Role-Enacting Agent definitions
    3) (IM) Interaction model
       - Concrete interaction scenes
       - Dynamic instantiation



    Transitions:
    1) All Targets
    2) Some Targets
    3) One target
    4) New target
    5) All Sources
    6) Some Sources
    7) One Source

    cite:Dignum2004 page 101 defines compatibility and consistency
    page 111 has a model overview of Opera.

    cite:Dignum2004 page 99:
    |             | Role            | Role                  | Role              |
    |             | Objectives      | Sub-Objectives        | Norms             |
    |-------------+-----------------+-----------------------+-------------------|
    | Agent Goals | obj < goals     | sub-obj support goals | norms limit goals |
    |             | obj!            | sub-obj improve goals | norms add goals   |
    |             | goals > obj     | sub-obj limit goals   |                   |
    |             | goals!          |                       |                   |
    |-------------+-----------------+-----------------------+-------------------|
    | Agent Plans | plans help objs | sub-obj > plans       | norms alter plans |
    |             |                 | sub-objs!             |                   |
    |             |                 | plans > sub-obj       |                   |
    |             |                 | plans!               |                   |

    cite:Dignum2004 page 153 : contract lifecycle
    Discovery -> Negotiation -> Execution -> Executed -> Fulfilled
              -> Failure     -> Failure   -> Cancelled-> Rejected

    cite:Dignum2004 page 162 : syntax of OperA

    cite:Dignum2004 page 198 has *interaction* structures.
*** ORA4MAS
*** PDDL
*** Petri Nets
*** PIM
*** Prometheus
    cite:padgham2002prometheus,padgham2005tool,abushark2016requirements,ionita2016using

    Three phase design methodology:
    1) System specification phase
       - Focus on identifying basic functionality
       - Inputs / Outputs
       - shared data sources
    2) Architectural design phase
       - Determine agents and interactions
    3) Detailed design phase
       - Agent internals

*** QUEST
*** ROADMAP
*** SCIFF
*** Scythe
*** SODA
    Omicini 2001
*** STRIPS
*** TOGA
*** Tracery
*** UML
*** VIATRA
** TODO Systems
*** AARON
*** ACME
*** ACT-R
*** AESOP
*** AKIRA
*** ALEC
*** ALLIANCE
*** AMELI
*** ATOMate
*** AUDIOGRAPH
*** BACON
*** Bad News
*** BEHAVEngine
*** BRIDGE
*** BUILD IT
*** CCalc
*** Ceptre
*** CHARMS
*** CHARON
*** Chimeria
*** CiF
*** CLARION
*** Click2Tag
*** CLIPS
*** CopyCat
*** CRYSTAL ISLAND
*** DEMAIS
*** ELIZE
*** EMIL
*** EMPath
*** Expressionist
*** Fabulist
*** Facade
*** Fast Forward
*** FearNot
*** GAMUT
*** Gemini
*** GESTER
*** GrACE
*** GrailGM
*** GRIOT
*** HARMONIA

    Electronic organizations with four levels of abstraction:
    1) Abstract level
       - Statues defined in high level
       - abstract norms
    2) Concrete level
       - Iterative concretization of abstract norms
       - policies defined
    3) Rule level
       - link norms and policies with means of ensuring them
    4) Procedure level
       - all rules and policies implemented for agents
*** Hennepin
*** Ikon Flux
*** IMMERSE
*** INGENIAS
*** InstAL
*** ISLANDER
*** Islanders
*** JASON
*** JESS
*** LIDA
*** LINUS
*** MACSYMA
*** MAIA
*** MaNEA
*** MAPSIM
*** MASELTOV
*** MetaPRL
*** MINSTREL
*** MULTIS
*** MYCIN
*** NAMS
*** NARS
*** NATYASASTRA
*** NERO
*** OBELIX
*** ORIENT
*** OSCAR
*** PARAGon
*** PaSSAGE
*** PDT
*** PECS
*** PLASMA
*** Prolog
*** PRS
*** RASCAL
*** RECALL
*** SAGE
*** SCHEHERAZADE
*** Sheldon County
*** SHRDLU
*** SOAR
*** SQUEGE
*** SugarScape
*** TABASCO
*** TACT
*** Tale-Spin
*** Talk of the Town
*** Tanagra
*** Tidal
*** TLTS
*** TOAST
*** TRIPS
*** TropICAL
*** TROPOS
*** Twig
*** Versu
*** Villanelle
*** [[http://alumni.media.mit.edu/~kris/ymir.html][YMIR]]
** TODO Methods
*** ABM
*** Activity theory
*** AOP
*** BOD
   :citations:
   cite:Bryson2001
   :END:
*** Case study theory development
   :citations:
   cite:George2002
   :END:

*** Computational Social Science
   :citations:
   cite:Epstein1999,Conte2012,Bharathy2010,epstein1996growing,meyer2009,Axelrod2005,hamill2010agent,Helbing2011
   :END:
*** Economics
   :citations:
   cite:Varian2009
   :END:
*** Empirical Methods For AI notes
   :citations:
   cite:cohen1995empirical
   :END:

*** Ethnography
*** Formal Methods
   :citations:
   cite:Sun,agotnes_et_al:DR:2014:4797
   :END:
*** Game Analysis
   :citations:
   cite:Aarseth2003,boellstorff2012ethnography
   :END:
*** Generative Methods
   :citations:
   cite:Compton
   :END:

*** GOMS
*** GORMAS
*** Grounded Theory
   :citations:
   cite:Corbin1990,Strauss1998,Charmaz2006,bryant2007sage,Charmaz2009,furniss2011confessions,Jr2013,Mordatch2017,Flick2009,Whittle2010
   :END:
*** Hypothesis testing for complex agents
   :citations:
   cite:JoannaJ.
   :END:
*** Literate Programming
*** Live Coding
   :citations:
   cite:Sorenson2007,McLean2014
   :END:
*** TODO MAS
**** MOISE
**** PRESAGE
**** ODD
**** Prometheus

*** MaSE
*** MCDM
   :citations:
   cite:Zavadskas2014,Mabin2006,Hwang1979,Triantaphyllou1998,Figueria2005,Scirea2017
   :END:
*** MCRDR
*** MDE
*** MODM
*** Norm Analysis Method
    Stamper 1988, Salter and Liu 2002
    see page 193 cite:Dignum2004

    Involves:
    Responsibility Analysis
    Resource Analysis
    Trigger Analysis
    Norm Specification
    Sanction

*** ODD
*** Ostrom
   :citations:
   cite:Ostrom
   :END:

*** Phenomenology
   :citations:
   cite:rubin1998phenomenology,Worthington2009,Mallon2005,Duffy2011,Breakwell2008,Agre1997a
   :END:
*** Questions Options Criteria
*** Sociologically Inspired Computing
   :citations:
   From cite:Macbeth2014
   Using cite:Jones2013
   and cite:Steels1995
   cite:Dautenhahn2005a
   :END:

** TODO Tools
   
