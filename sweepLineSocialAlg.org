* Social rule as a hierarchical graph
In the way that a voronoi diagram sweeps down, differentiating between the beach
and sweep line, have recursive connections between layers of social rules.

Rules can describe a net of facts and other rules.

let:
F,G,H be distinct grammars of facts.

R be a set of rules comprised of a tuple r(I,O,S) where:
	I is the input of the rule, as a string of facts in F.
    O is the output of the rule, as a string of facts in G
    S is the symbol string associated with the rule, providing
	additional information about it in language H

F,G,H could equal, be a superset, or be disjoint from each other.

Layers can then be formed of distinct layers of rules L,L',L'' etc,
which are of the form L(R,F,G,H), L'(R',F',G',H').
such that F' and I' of L' are the same as S and H of L. That is, the output of
one layer is the input of another layer.  

The first layer's input, F, would be the base facts of the simulating
system, as would the last layer, R^ that would trigger the simulating
system to perform actions.   
 
This can imply the simulating system, the container typically, to be a
black box of rules itself, whatever they may be. This can imply
thinking of the super set L" (consisting of all layers) is a loop. 

f(L") = f(L) -> F(L') -> F(L'') -> etc to f(L_last)

What if there were branches to previous loops:
F(L"") = f(L) <-> F(L') ...

With inverse ruleset R#, which would work in the opposite direction:
r#(O,I,S) = r(I,O,S)

And the rule engine has an order of sweeps to evaluate and update by:
Order = [L,L',L,L',L'',L_last]

CiF has a similar system: Volition rules -> Influence rules -> Actions -> Trigger
Rules. 

let F_1, the input set for R_1 of L_1, be the set of brute facts, dependent
on the simulating system. this is also H_j of L_j, the triggering
layer out of L_n layers. 

All other facts are social facts, but are they all equal? No.
Differentiate them into different types and further specified layers:

There can be representable facts F_rep, and silent facts F_sil, as
subsets of F_1,
things that present observable differences and unobservable
differences in the underlying system. The difference between knocking
on a door and firing radiation through a door. 

There can rule types as well:
Physical->Physical Rules (Physical feedback, the Simulation blackbox layer)
Physical->Social Rules (Physically constitutive/definitional)
Social -> Social Rules (Social definitions, pure symbolic)
Social -> Social Rules(Transformational, communicative)
Social -> Physical Rules (Socially initiated actions)

Constitutive and Symbolic rules could change with only indirect,
meaning based changes to the behaviour of the system. Favourite
colours, or shouting when angry versus whispering when angry. 

Communicative rules are distinct, because we rely on some level of
natural language to be able to understand. (Though James Ryan's
islanders didn't need that, using a bit mask description of language).

If there are transformative layers, such as aggregation, weighting,
or data assembly from multiple sources...

** Authoring for Layers.
Be able to define inputs, and ouputs, for a layer, and orders of
assessment. Specify that inputs for L_1 are a,b,c,d,e.. and the
outputs are w,x,y,z. 

Then move to L_2, that has w,x,y,z as inputs already, with the
inputs marked as unused. Any new inputs defined will be recursively added to L_1's output, and
marked as undefined.Outputs work similarly to L_3.

Have the system warn of used ouputs, be able to enforce/define types
of the outputs/inputs, and specify generics, and cross-layer
facts. Preferences, and recursive changes are also possible. 

System keeps prompting till L_1 input == L_action output

Transformational layers could be standardised (eg: combine down inputs to
n [new/defined] super facts), select m from input options, weight
rules in a bell curve) could be varied in defined ways (curve changes,
selection number, reset). (Similar to Reaktor system components to
create a synth).

A Transformational layer could also be Societal / Individual based
calculation (ie: Specify the bracketed layers should be run on an
individual rather than societal, or statistical, or... normative?
basis).

A UI similar to Reaktor, wiring together an architecture graphically,
would be intersting. Or at least part of the system, modularly?
Treat individuals as 'voices' of the synth?




 

