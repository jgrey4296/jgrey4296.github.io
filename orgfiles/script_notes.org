#+TITLE: Script Notes

* Overview

* Main
** GPG Notes (v 2.2.11)
*** *Short IDs*: Last 8 digits of fingerprint
*** Basic Protocol
   Create Key
   Create Revocation Cert
   Create Fingerprint
   Export Public and Secret Keys
   Backup [Public, Secret, Revocation]

   Import other persons public key
   Verify it against their fingerprint
   Sign the Key
   (optional, give the signed key back by exporting it)

   Then decrypt messages sent to you,
   encrypt messages to them using their public key,
   or verify they sent a plaintext signature.

*** Setup for Emacs
   To use, add "allow-emacs-pinentry" to "~/.gnupg/gpg-agent.conf",
   reload the configuration with "gpgconf --reload gpg-agent", and
   start the server with M-x pinentry-start. (or add (pinentry-start) to .emacs)

*** List keys
   gpg -k
   gpg --list-sigs
*** Importing a key:
   Works for secret and public keys
   gpg --import [filename]
*** Generating a key
   gpg --gen-key
   gpg --gen-revoke --armor --output=RevocationCertificate.asc [email]
*** Deleting a key:
   gpg --delete-secret-keys
   gpg --delete-keys
*** Get a fingerprint
   Fingerprints give a shorter to verify hash of public keys
   gpg --fingerprint [email]
*** Sign a key
   gpg --sign-key [email]
   or
   gpg --interactive --edit-key [email]
*** Export keys
   gpg --armor --export[-secret-keys] [-o file] [-a ID | email]
*** Encrypt
   *Don't forget to add yourself to the recipients*
   gpg [-o output] --sign --armor [-r recipient] [-e file]
*** Decrypt
   gpg  -o output -d file
*** Sign a plaintext message
   gpg --clearsign file
*** Verify a signature
   gpg --verify file
*** Using Stronger Encrpytion
   gpg --interactive --edit-key [email]
   Then 'showpref' will show algorithm preferences
   from most - least.

   modify using 'setpref [algorithms..]'

   then 'save'

** Compiling Aseprite from source
  Follow the instructions to install google depot_tools, then skia.
  The missing instruction is to *unset python3 and anaconda in the path*
  as depot_tools, and the setup script for skia uses *python 2*.
  after that, compilation is straight forward, making sure to target the
  OSX version you are actually on.

** Firefox
Get to configs with about:about
Use: reader.parse-on-load.force-enabled
for reader view force

Set: browser.bookmarks.editDialog.firstEditField
to: tagsField
for a better bookmarking default

** Markdown html export
Add a local file to `markdown-css-paths`,
can use npm package `generate-github-markdown-css` as a start

** Image Pdf calls
#+NAME: image to pdf generation
#+begin_src bash :results value
convert ? -alpha off ./temp/`?`
mogrify -orient bottom-left ?
img2pdf --output `?`.pdf --pagesize A4 --auto-orient ?
pdftk * cat output diagrams.pdf
#+end_src

#+NAME: text to pdf generation
#+begin_src bash :results value
pandoc ? -o output.pdf
#+end_src

** Awk
#+begin_src awk
awk 'match($0, /HREF="(.+?)"/, a) {print a[1]}'

#+end_src awk

** Pdf Metadata
#+begin_src bash
exiftool file.pdf

# or:
pdftk file.pdf dump_data_utf8 > file.info
# edit
pdftk file.pdf update_info_utf8 file.info output file2.pdf
#+end_src

* Links
[[https://www.futureboy.us/pgp.html][GPG General Howto]]
https://pandoc.org/
