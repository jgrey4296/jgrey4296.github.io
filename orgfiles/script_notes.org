#+TITLE: Script Notes

* Overview

* Main
** Find
To find files, but not search .git directories:
find ? -type f -a -not -name "DS_Store" -print -o -type d -name ".git" -prune

** ADB
Tablet will periodically de-authorize adb,
so re-pair with `adb pair`
** Awk
#+begin_src awk
awk 'match($0, /HREF="(.+?)"/, a) {print a[1]}'

#+end_src awk

** Compiling Aseprite from source
  Follow the instructions to install google depot_tools, then skia.
  The missing instruction is to *unset python3 and anaconda in the path*
  as depot_tools, and the setup script for skia uses *python 2*.
  after that, compilation is straight forward, making sure to target the
  OSX version you are actually on.

** Emacs Straight Recipes
https://github.com/radian-software/straight.el#the-recipe-format

#+begin_src elisp
;; Disable Byte Compilation
(package! a-package :recipe (:build (:not compile)))
;; Or disable byte compilation with
;; -*- no-byte-compile: t; -*-

;; Specify a local repo
(package! a-package :recipe (:local-repo "~/.doom.d/packages/a-package"))


#+end_src

** File encoding
file -I {}
iconv -f {enc} -t {enc} {} > conv-{}

** Firefox
Get to configs with about:about
Use: reader.parse-on-load.force-enabled
for reader view force

Set: browser.bookmarks.editDialog.firstEditField
to: tagsField
for a better bookmarking default

** GPG Notes (v 2.2.11)
*** *Short IDs*: Last 8 digits of fingerprint
*** Basic Protocol
   Create Key
   Create Revocation Cert
   Create Fingerprint
   Export Public and Secret Keys
   Backup [Public, Secret, Revocation]

   Import other persons public key
   Verify it against their fingerprint
   Sign the Key
   (optional, give the signed key back by exporting it)

   Then decrypt messages sent to you,
   encrypt messages to them using their public key,
   or verify they sent a plaintext signature.

*** Setup for Emacs
   To use, add "allow-emacs-pinentry" to "~/.gnupg/gpg-agent.conf",
   reload the configuration with "gpgconf --reload gpg-agent", and
   start the server with M-x pinentry-start. (or add (pinentry-start) to .emacs)

*** List keys
   gpg -k
   gpg --list-sigs
*** Importing a key:
   Works for secret and public keys
   gpg --import [filename]
*** Generating a key
   gpg --gen-key
   gpg --gen-revoke --armor --output=RevocationCertificate.asc [email]
*** Deleting a key:
   gpg --delete-secret-keys
   gpg --delete-keys
*** Get a fingerprint
   Fingerprints give a shorter to verify hash of public keys
   gpg --fingerprint [email]
*** Sign a key
   gpg --sign-key [email]
   or
   gpg --interactive --edit-key [email]
*** Export keys
   gpg --armor --export[-secret-keys] [-o file] [-a ID | email]
*** Encrypt
   *Don't forget to add yourself to the recipients*
   gpg [-o output] --sign --armor [-r recipient] [-e file]
*** Decrypt
   gpg  -o output -d file
*** Sign a plaintext message
   gpg --clearsign file
*** Verify a signature
   gpg --verify file
*** Using Stronger Encrpytion
   gpg --interactive --edit-key [email]
   Then 'showpref' will show algorithm preferences
   from most - least.

   modify using 'setpref [algorithms..]'

   then 'save'

** Image Pdf calls
#+NAME: image to pdf generation
#+begin_src bash :results value
convert ? -alpha off ./temp/`?`
mogrify -orient bottom-left ?
img2pdf --output `?`.pdf --pagesize A4 --auto-orient ?
pdftk * cat output diagrams.pdf
#+end_src

** pdftotext
pdftotext [options] <PDF-file> [<text-file>]

** Pandoc
#+NAME: text to pdf generation
#+begin_src bash :results value
pandoc ? -o output.pdf
#+end_src

** Markdown html export
Add a local file to `markdown-css-paths`,
can use npm package `generate-github-markdown-css` as a start

** Pdf Metadata
#+begin_src bash
exiftool file.pdf

# or:
pdftk file.pdf dump_data_utf8 > file.info
# edit
pdftk file.pdf update_info_utf8 file.info output file2.pdf
#+end_src

# From https://askubuntu.com/questions/1264322
#+begin_src bash
# For Creating Bookmarks/TOC in pdfs:
# BookmarkBegin
# BookmarkTitle:
# BookmarkLevel: 1
# BookmarkPageNumber:
pdftk ? dump_data > info.txt
# -- Add bookmarks
pdftk ? update_info info.txt output updated.pdf
#+end_src

** Sed
Filter lines with:
'/pattern/d'

Print Matching lines with:
'/pattern/p'

case Invariant:
'/pattern/I'

** Wordnet
`wn`

#+begin_src bash
# For Nouns
-hypen		Hypernyms
-hypon, -treen	Hyponyms & Hyponym Tree
-synsn		Synonyms (ordered by estimated frequency)
-derin		Derived Forms
-famln		Familiarity & Polysemy Count
-coorn		Coordinate Terms (sisters)
-grepn		List of Compound Words
-over		Overview of Senses
#+end_src

#+begin_src bash
# For verbs
-hypev		Hypernyms
-hypov, -treev	Hyponyms & Hyponym Tree
-synsv		Synonyms (ordered by estimated frequency)
-deriv		Derived Forms
-famlv		Familiarity & Polysemy Count
-framv		Verb Frames
-coorv		Coordinate Terms (sisters)
-simsv		Synonyms (grouped by similarity of meaning)
-grepv		List of Compound Words
-over		Overview of Senses
#+end_src

#+begin_src bash
# Adjectives
-antsa		Antonyms
-synsa		Synonyms (ordered by estimated frequency)
-attra		Attributes
-deria		Derived Forms
-domna		Domain
-famla		Familiarity & Polysemy Count
-grepa		List of Compound Words
-over		Overview of Senses
#+end_src

#+begin_src bash
# Adverbs
-antsr		Antonyms
-synsr		Synonyms (ordered by estimated frequency)
-pertr		Pertainyms
-famlr		Familiarity & Polysemy Count
-grepr		List of Compound Words
-over		Overview of Senses
#+end_src

** XML

*** XPath                                       :query_language:
#+NAME: Example Code
#+begin_src xpath :results output
# display the last names of all people in the doc
//person/@last-name

# get the 2nd person node
/people/person[2]

# get all the person nodes that have addresses in denver
//person[address/@city='denver']

# get all the addresses that have "south" in the street name
//address[contains(@street, 'south')]

# reject certain nodes:
//(* except script)
//*[not(self::script)]

# Extract an attribute value:
//a/extract(@href, '.*')
#+end_src

#+begin_src xpath
# Axes
ancestor
ancestor-or-self
attribute / @
child
descendant
descendantor-self
following
following-sibling
parent
preceding
preceding-sibling
self / .


#+end_src

*** [[https://www.videlibri.de/xidel.html][xidel]]                                       :cli:query:
#+begin_src bash
# Extracts between table and footer
xidel -s --output-format=xml --xpath "//table/following-sibling::*[//*[@id='printfooter']/preceding::node()]" `?`
#+end_src
*** [[http://xmlstar.sourceforge.net/][XML Starlet]]
#+NAME: commands
#+begin_src bash :results output
xml
#+end_src

:xml_command:
XMLStarlet Toolkit: Command line utilities for XML
Usage: xml [<options>] <command> [<cmd-options>]
where <command> is one of:
  ed    (or edit)      - Edit/Update XML document(s)
  sel   (or select)    - Select data or query XML document(s) (XPATH, etc)
  tr    (or transform) - Transform XML document(s) using XSLT
  val   (or validate)  - Validate XML document(s) (well-formed/DTD/XSD/RelaxNG)
  fo    (or format)    - Format XML document(s)
  el    (or elements)  - Display element structure of XML document
  c14n  (or canonic)   - XML canonicalization
  ls    (or list)      - List directory as XML
  esc   (or escape)    - Escape special XML characters
  unesc (or unescape)  - Unescape special XML characters
  pyx   (or xmln)      - Convert XML into PYX format (based on ESIS - ISO 8879)
  p2x   (or depyx)     - Convert PYX into XML
<options> are:
  -q or --quiet        - no error output
  --doc-namespace      - extract namespace bindings from input doc (default)
  --no-doc-namespace   - don't extract namespace bindings from input doc
  --version            - show version
  --help               - show help
Wherever file name mentioned in command help it is assumed
that URL can be used instead as well.

Type: xml <command> --help <ENTER> for command help

XMLStarlet is a command line toolkit to query/edit/check/transform
XML documents (for more information see http://xmlstar.sourceforge.net/)
:END:

**** element / structure
:usage:
XMLStarlet Toolkit: Display element structure of XML document
Usage: xml el [<options>] <xml-file>
where
  <xml-file> - input XML document file name (stdin is used if missing)
  <options> is one of:
  -a    - show attributes as well
  -v    - show attributes and their values
  -u    - print out sorted unique lines
  -d<n> - print out sorted unique lines up to depth <n>

XMLStarlet is a command line toolkit to query/edit/check/transform
XML documents (for more information see http://xmlstar.sourceforge.net/)
:END:

**** select
:usage:
Usage: xml sel <global-options> {<template>} [ <xml-file> ... ]
where
  <global-options> - global options for selecting
  <xml-file> - input XML document file name/uri (stdin is used if missing)
  <template> - template for querying XML document with following syntax:

<global-options> are:
  -Q or --quiet             - do not write anything to standard output.
  -C or --comp              - display generated XSLT
  -R or --root              - print root element <xsl-select>
  -T or --text              - output is text (default is XML)
  -I or --indent            - indent output
  -D or --xml-decl          - do not omit xml declaration line
  -B or --noblanks          - remove insignificant spaces from XML tree
  -E or --encode <encoding> - output in the given encoding (utf-8, unicode...)
  -N <name>=<value>         - predefine namespaces (name without 'xmlns:')
                              ex: xsql=urn:oracle-xsql
                              Multiple -N options are allowed.
  --net                     - allow fetch DTDs or entities over network
  --help                    - display help

Syntax for templates: -t|--template <options>
where <options>
  -c or --copy-of <xpath>   - print copy of XPATH expression
  -v or --value-of <xpath>  - print value of XPATH expression
  -o or --output <string>   - output string literal
  -n or --nl                - print new line
  -f or --inp-name          - print input file name (or URL)
  -m or --match <xpath>     - match XPATH expression
  --var <name> <value> --break or
  --var <name>=<value>      - declare a variable (referenced by $name)
  -i or --if <test-xpath>   - check condition <xsl:if test="test-xpath">
  --elif <test-xpath>       - check condition if previous conditions failed
  --else                    - check if previous conditions failed
  -e or --elem <name>       - print out element <xsl:element name="name">
  -a or --attr <name>       - add attribute <xsl:attribute name="name">
  -b or --break             - break nesting
  -s or --sort op xpath     - sort in order (used after -m) where
  op is X:Y:Z,
      X is A - for order="ascending"
      X is D - for order="descending"
      Y is N - for data-type="numeric"
      Y is T - for data-type="text"
      Z is U - for case-order="upper-first"
      Z is L - for case-order="lower-first"

There can be multiple --match, --copy-of, --value-of, etc options
in a single template. The effect of applying command line templates
can be illustrated with the following XSLT analogue

xml sel -t -c "xpath0" -m "xpath1" -m "xpath2" -v "xpath3" \
        -t -m "xpath4" -c "xpath5"
:END:

**** edit
:usage:
XMLStarlet Toolkit: Edit XML document(s)
Usage: xml ed <global-options> {<action>} [ <xml-file-or-uri> ... ]
where
  <global-options>  - global options for editing
  <xml-file-or-uri> - input XML document file name/uri (stdin otherwise)

<global-options> are:
  -P, or -S           - preserve whitespace nodes.
     (or --pf, --ps)    Note that space between attributes is not preserved
  -O (or --omit-decl) - omit XML declaration (<?xml ...?>)
  -L (or --inplace)   - edit file inplace
  -N <name>=<value>   - predefine namespaces (name without 'xmlns:')
                        ex: xsql=urn:oracle-xsql
                        Multiple -N options are allowed.
                        -N options must be last global options.
  --net               - allow network access
  --help or -h        - display help

where <action>
  -d or --delete <xpath>
  --var <name> <xpath>
  -i or --insert <xpath> -t (--type) elem|text|attr -n <name> [-v (--value) <value>]
  -a or --append <xpath> -t (--type) elem|text|attr -n <name> [-v (--value) <value>]
  -s or --subnode <xpath> -t (--type) elem|text|attr -n <name> [-v (--value) <value>]
  -m or --move <xpath1> <xpath2>
  -r or --rename <xpath1> -v <new-name>
  -u or --update <xpath> -v (--value) <value>
                         -x (--expr) <xpath>

XMLStarlet is a command line toolkit to query/edit/check/transform
XML documents (for more information see http://xmlstar.sourceforge.net/)
:END:

**** transform
:usage:
xml tr
XMLStarlet Toolkit: Transform XML document(s) using XSLT
Usage: xml tr [<options>] <xsl-file> {-p|-s <name>=<value>} [<xml-file>...]
where
  <xsl-file>      - main XSLT stylesheet for transformation
  <xml-file>      - input XML document file/URL (stdin is used if missing)
  <name>=<value>  - name and value of the parameter passed to XSLT processor
  -p              - parameter is XPATH expression ("'string'" to quote string)
  -s              - parameter is a string literal
<options> are:
  --help or -h    - display help message
  --omit-decl     - omit xml declaration <?xml version="1.0"?>
  --embed or -E   - allow applying embedded stylesheet
  --show-ext      - show list of extensions
  --val           - allow validate against DTDs or schemas
  --net           - allow fetch DTDs or entities over network
  --xinclude      - do XInclude processing on document input
  --maxdepth val  - increase the maximum depth
  --html          - input document(s) is(are) in HTML format

XMLStarlet is a command line toolkit to query/edit/check/transform
XML documents (for more information see http://xmlstar.sourceforge.net/)

Current implementation uses libxslt from GNOME codebase as XSLT processor
(see http://xmlsoft.org/ for more details)
:END:

**** validate
:usage:
xml val
XMLStarlet Toolkit: Validate XML document(s)
Usage: xml val <options> [ <xml-file-or-uri> ... ]
where <options>
  -w or --well-formed        - validate well-formedness only (default)
  -d or --dtd <dtd-file>     - validate against DTD
  --net                      - allow network access
  -s or --xsd <xsd-file>     - validate against XSD schema
  -E or --embed              - validate using embedded DTD
  -r or --relaxng <rng-file> - validate against Relax-NG schema
  -e or --err                - print verbose error messages on stderr
  -S or --stop               - stop on first error
  -b or --list-bad           - list only files which do not validate
  -g or --list-good          - list only files which validate
  -q or --quiet              - do not list files (return result code only)

NOTE: XML Schemas are not fully supported yet due to its incomplete
      support in libxml2 (see http://xmlsoft.org)

XMLStarlet is a command line toolkit to query/edit/check/transform
XML documents (for more information see http://xmlstar.sourceforge.net/)
:END:

**** format
:usage:
XMLStarlet Toolkit: Format XML document
Usage: xml fo [<options>] <xml-file>
where <options> are
   -n or --noindent            - do not indent
   -t or --indent-tab          - indent output with tabulation
   -s or --indent-spaces <num> - indent output with <num> spaces
   -o or --omit-decl           - omit xml declaration <?xml version="1.0"?>
   -R or --recover             - try to recover what is parsable
   -D or --dropdtd             - remove the DOCTYPE of the input docs
   -C or --nocdata             - replace cdata section with text nodes
   -N or --nsclean             - remove redundant namespace declarations
   -e or --encode <encoding>   - output in the given encoding (utf-8, unicode...)
   -H or --html                - input is HTML
   -h or --help                - print help

XMLStarlet is a command line toolkit to query/edit/check/transform
XML documents (for more information see http://xmlstar.sourceforge.net/)
:END:

**** canonic
:usage:
XMLStarlet Toolkit: XML canonicalization
Usage: xml c14n <mode> <xml-file> [<xpath-file>] [<inclusive-ns-list>]
where
  <xml-file>   - input XML document file name (stdin is used if '-')
  <xpath-file> - XML file containing XPath expression for
                 c14n XML canonicalization
    Example:
    <?xml version="1.0"?>
    <XPath xmlns:n0="http://a.example.com" xmlns:n1="http://b.example">
    (//. | //@* | //namespace::*)[ancestor-or-self::n1:elem1]
    </XPath>

  <inclusive-ns-list> - the list of inclusive namespace prefixes
                        (only for exclusive canonicalization)
    Example: 'n1 n2'

  <mode> is one of following:
  --with-comments         XML file canonicalization w comments (default)
  --without-comments      XML file canonicalization w/o comments
  --exc-with-comments     Exclusive XML file canonicalization w comments
  --exc-without-comments  Exclusive XML file canonicalization w/o comments

XMLStarlet is a command line toolkit to query/edit/check/transform
XML documents (for more information see http://xmlstar.sourceforge.net/)
:END:

**** list directory : ls
**** (un)escape
:usage:
feed strings in
:END:


**** examples
#+begin_src bash
# query, -I(indenting output), -t(template:) -f(file name) -n(new line) -m(match xpath) //Trait -c(copy xpath) . -n -b(break nesting) file
xml sel -I -t -f -n -m //Trait -c . -n -b ./facade_messy.xml

# delete a path:
xml ed -d "//div[@id='toc']" ? > mod-`?`
#+end_src

#+NAME: DTD Validation
#+begin_src bash :results output
xml val -e -d ./test.dtd ./mytest.xml
#+end_src

#+NAME: XSD Validation
#+begin_src bash :results output
xml val -e -s ./test.xsd ./mytest.xml
#+end_src

*** [[https://relaxng.org/jclark/trang-manual.html][Trang]]                                       :schema:
trang [input.xmls] output.xsd

*** [[https://github.com/tefra/xsdata-plantuml][xsdata plantuml]]
xsdata samples/order.xsd --output plantuml --package uml_gen

*** [[http://saxon.sourceforge.net/][Saxon]]

*** xmllint


** Gradle

** Wget
https://www.networkinghowtos.com/howto/change-the-user-agent-in-wget/
https://www.networkinghowtos.com/howto/common-user-agent-list/

wget --user-agent="Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)"
wget --user-agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:53.0) Gecko/20100101 Firefox/53.0"

** Latex

*** tlmgr

:outdated_l3_layer:
https://tex.stackexchange.com/questions/586467/

sudo fmtutil-sys --all
:END:


*** texdoc
https://tex.stackexchange.com/questions/297004/
tlmgr option docfiles 1
tlmgr install --reinstall $(tlmgr list --only-installed | sed -E 's/i (.*):.*$/\1/')

*** mbsync and mu

#+NAME: mu init
#+begin_src bash :results output
mu init --maildir ~/.mail --my-address {address}
mu index
#+end_src



* Links
[[https://www.futureboy.us/pgp.html][GPG General Howto]]
https://pandoc.org/
