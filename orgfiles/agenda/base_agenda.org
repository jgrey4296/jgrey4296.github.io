-*- mode: org; -*-
#+STARTUP: content


* Active
** ACTIVE Blood Bind
*** [∅] bloodbind! -> structs
macro -> pattern -> entry -> profile -> store

*** [∅] pattern expansion
*** application
*** local vars
*** global vars
*** hook installation
*** reporting
*** Testing
**** start state instruction
**** map creation
**** local map creation
**** map prefixs
**** map states
**** lambda wrapping
**** metadata pairing
**** toggle
**** rebinding

** TODO librarian
- State "TODO"       from              [2024-05-23 Thu 01:57]
*** [∅] use xref and ivy-xref
https://blog.kotatsu.dev/posts/2023-10-28-emacs-ctags/
https://www.ackerleytng.com/posts/emacs-xref/
https://andreyor.st/posts/2023-09-09-migrating-from-lsp-mode-to-eglot/
https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html

#+begin_src emacs-lisp :tangle yes

(cl-defgeneric xref-location-marker (location)
  "Return the marker for LOCATION.")

(cl-defgeneric xref-location-group (location)
  "Return a string used to group a set of locations.
This is typically a file name, but can also be a package name, or
some other label.

When it is a file name, it should be the \"expanded\" version.")

(cl-defgeneric xref-location-line (_location)
  "Return the line number corresponding to the location."
  nil)

(cl-defgeneric xref-match-length (_item)
  "Return the length of the match."
  nil)

#+end_src

#+begin_src emacs-lisp :tangle yes
(cl-defgeneric xref-backend-definitions (backend identifier)
  "Find definitions of IDENTIFIER.

The result must be a list of xref objects.  If IDENTIFIER
contains sufficient information to determine a unique definition,
return only that definition.  If there are multiple possible
definitions, return all of them.  If no definitions can be found,
return nil.

IDENTIFIER can be any string returned by
`xref-backend-identifier-at-point', or from the table returned by
`xref-backend-identifier-completion-table'.

To create an xref object, call `xref-make'.")

(cl-defgeneric xref-backend-references (_backend identifier)
  "Find references of IDENTIFIER.
The result must be a list of xref objects.  If no references can
be found, return nil.

The default implementation uses `semantic-symref-tool-alist' to
find a search tool; by default, this uses \"find | grep\" in the
current project's main and external roots."
  (mapcan
   (lambda (dir)
     (message "Searching %s..." dir)
     (redisplay)
     (prog1
         (xref-references-in-directory identifier dir)
       (message "Searching %s... done" dir)))
   (let ((pr (project-current t)))
     (project-combine-directories
      (cons
       (xref--project-root pr)
       (project-external-roots pr))))))

(cl-defgeneric xref-backend-apropos (backend pattern)
  "Find all symbols that match PATTERN string.
The second argument has the same meaning as in `apropos'.

If BACKEND is implemented in Lisp, it can use
`xref-apropos-regexp' to convert the pattern to regexp.")

(cl-defgeneric xref-backend-identifier-at-point (_backend)
  "Return the relevant identifier at point.

The return value must be a string, or nil meaning no identifier
at point found.

If it's hard to determine the identifier precisely (e.g., because
it's a method call on unknown type), the implementation can
return a simple string (such as symbol at point) marked with a
special text property which e.g. `xref-backend-definitions' would
recognize and then delegate the work to an external process."
  (let ((thing (thing-at-point 'symbol)))
    (and thing (substring-no-properties thing))))

(cl-defgeneric xref-backend-identifier-completion-table (backend)
  "Return the completion table for identifiers.")

(cl-defgeneric xref-backend-identifier-completion-ignore-case (_backend)
  "Return t if case is not significant in identifier completion."
  completion-ignore-case)

#+end_src

*** [∅] structs
*** [∅] add session saving
*** [∅] document
*** [∅] tests
*** [∅] bookmark search
*** docs

** TODO org
*** diary jump
*** archive jump
*** journal jump
*** notes
*** projects
* Queue
** QUEUED re-add potassco to apt
https://launchpad.net/~potassco/+archive/ubuntu/stable
[[/media/john/data/github/_templates/apt/sources/potassco-ubuntu-stable-lunar.list][apt sources]]
** ace window add mode indicators
** librarian tag file mode
** annie liang
https://www.anniehliang.com/research
* Job Groups
** [[file:/media/john/data/github/bibliography/.tasks/bibliography_todos.org::*Bibliography][Bibliography]]
** [[file:dataset_todos.org::*Datasets][Datasets]]
** [[file:/media/john/data/github/python/doot/.tasks/doot_todos.org::*Doot][Doot]]
** [[file:dotnet_todos.org::*Dotnet][Dotnet]]
** [[file:elixir_todos.org::*Elixir][Elixir]]
** [[file:/media/john/data/github/_config/.tasks/emacs_todos.org::*Emacs][Emacs]]
** [[file:godot_todos.org::*Godot][Godot]]
** [[file:homepage_todos.org::*Homepage][Homepage]]
** [[file:jobsearch_todos.org::*Job Search][Job Search]]
** [[file:jvm_todos.org::*JVM][JVM]]
** [[file:lisp_todos.org::*Lisp][Lisp]]
** [[file:python_todos.org::*Python][Python]]
** [[file:rust_todos.org::*Rust][Rust]]
** [[file:/media/john/data/github/_templates/.tasks/template_todos.org::*Templates][Templates]]
* [[file:notes.org::Inbox][Notes]]
* [[file:/media/john/data/github/bibliography/bookmarks/urls.org][Links/urls]]
** Main
*** [[file:/media/john/data/github/lisp/blood/blood][Blood]]
*** [[file:/media/john/data/github/python/doot/doot][Doot]]
*** [[file:/media/john/data/github/python/tomlguard][tomlguard]]
*** [[file:~/github/python/acab][Acab]]
*** [[file:~/github/python/instal][Instal]]
*** [[file:~/github/python/corana][Corana]]
** Secondary
*** [[file:~/github/jgrey4296.github.io/wiki_/quotes][Quotes]]
*** [[file:~/github/jgrey4296.github.io/wiki_/taxonomies][Taxonomies]]
*** [[~/github/jgrey4296.github.io/wiki_/taxonomies/DSLs.org][DSLs]]
*** [[file:~/github/bibliography/main][Bibliography]]
*** [[file:~/library/twitter][Twitter Threads]]
** [[file:~/github/jgrey4296.github.io/orgfiles/primary/research_questions.org][Research Questions]]
