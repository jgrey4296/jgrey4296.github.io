#+title:  Answer Set Programming
* Overview
* Main
** Examples                                                                    :sandbox:
*** #+NAME: Example
#+begin_src clingo :results output
n(4).
sizes((rows;columns), N) :- n(N).
board(X,Y) :- sizes(rows,A), sizes(columns,B), X=1..A, Y=1..4.
%boardSize(S) :- n(Q), NS=Q*Q, S=#count { board(X,Y) : board(X,Y) }, S=NS.
boardSize(S) :- S= #count { board(X,Y) : board(X,Y) }.
:- not boardSize(_).
:- boardSize(S), n(N), NS=N*N, S!=NS.
#show boardSize/1.
#+end_src

*** #+NAME: for testing ob-clingo
#+HEADER: :clingo-args -n 4
#+begin_src clingo :results output
1{a(1..5)}2.

#+end_src

#+RESULTS:
#+begin_example
   clingo version 5.4.0
   Reading from ...45c0000gn/T/babel-7DJl0a/clingo-GBqwQn
   Solving...
   Answer: 1
   a(5)
   Answer: 2
   a(3)
   Answer: 3
   a(3) a(5)
   Answer: 4
   a(4)
   SATISFIABLE

   Models       : 4+
   Calls        : 1
   Time         : 0.002s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
   CPU Time     : 0.002s
#+end_example

** Syntax
Syntax is a DSL of prolog
*** Facts                                                                       :syntax:
**** #+NAME: Fact Examples
#+begin_src clingo :results output
%%Simple values:
a. b. c.
%%Compound:
a(1).
something(else).
%%Ranges:
a(1..3).
#+end_src

#+RESULTS:
#+begin_example
clingo version 5.4.0
Reading from ...45c0000gn/T/babel-7DJl0a/clingo-qlIbBl
Solving...
Answer: 1
a(1) a(2) a(3) a b c something(else)
SATISFIABLE

Models       : 1
Calls        : 1
Time         : 0.001s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.001s
#+end_example

*** Negation                                                                    :syntax:
**** #+NAME: Negation Examples
#+begin_src clingo :results output
a.

%% Default Negation (closed world):
c :- not b.

%% Classical Negation (open world):
d :- -b.

#+end_src

#+RESULTS:
#+begin_example
    clingo version 5.4.0
    Reading from ...45c0000gn/T/babel-7DJl0a/clingo-w0V4De
    Solving...
    Answer: 1
    c a
    SATISFIABLE

    Models       : 1
    Calls        : 1
    Time         : 0.001s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.001s
#+end_example

*** Rules                                                                       :syntax:
**** #+NAME: Basic Rules
#+begin_src clingo :results output
%% then : if.
head :- body.

%% Conjunctions:
head :- body, body, body.
%% Disjunctions:
head :- body; body.

%% Exclusions:
:- body.

%% Conditions ':' provide set-like construction.
%% OR on lsh, AND on rhs.
meet :- available(X) : person(X).
on(X) : day(X) :- meet.

%% becomes:
meet :- available(jane), available(john).
on(mon) | on(tue) | on(wed) | on(thu) | on(fri) :- meet.

#+end_src

**** #+NAME: Disjunction Test
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
{ a(1..4) }.
c :- 1{ a(1;2) }.
:- not c.
#+end_src

#+RESULTS:
#+begin_example
clingo version 5.4.0
Reading from ...45c0000gn/T/babel-7DJl0a/clingo-skiRnE
Solving...
Answer: 1
a(2) c
Answer: 2
a(2) a(4) c
Answer: 3
a(2) a(3) c
Answer: 4
a(2) a(3) a(4) c
Answer: 5
a(1) c
SATISFIABLE

Models       : 5+
Calls        : 1
Time         : 0.003s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.003s
#+end_example

*** Constraints                                                                 :syntax:
**** #+NAME: Cardinality Constraints
#+begin_src clingo :results output
%% lowNum { fact } highNum.

%%Optional rule eval:
{ head } :- body.

%% Generate specific numbers of head
{ head } = 1 :- body.
2{ head : body }3.

%% Success on day X if ther are 2 people alive on that day
success(X) :- day(X), Z=#count { Y : alive_on(X,Y) }, Z>0.

%Rule: success if there is at least 1 person who is alive
success :- 1{ alive_on(_,X) : person(X) }3.

%% succcess on all days if for each day there is a success
succ_on_all_days :- success(X) : day(X).



%% Create n variations of 'test(x, Y).'
%% to fill with all values of Y results in size(y) * n facts
%% ie: during grounding, a(X) is expanded for each a(X),
%% to { test(X1, Y), test(X2, Y)... test(X3,Y) } :- b(Y).
{ test(X, Y) : a(X) } = n :- b(Y).

x(1..3).
y(1..3).
loc(X,Y) :- x(X), y(Y).
time(5).
%% for each T, create a single move, fill with X,Y where x > Y
{ move(X,Y,T) : x(X), y(Y), X > Y } = 1 :- time(Q), T=1..Q.
#+end_src

*** Aggregates                                                                  :syntax:
**** #+NAME: Aggregates
#+begin_src clingo :results output
%% count all a's.
%% As between the {} is a set, make sure each entry is unique
a(1..4).
a_count(X) :- X = #count { Y : a(Y) }.

a(3).
b(X,Y) :- a(S), X = 1..S, Y= 1..S.
b_count(X) :- X = #count { temp(Q,R) : b(Q,R) }.

#+end_src

**** #+NAME: Sum example
#+begin_src clingo :results output
node(1). node(3). node(5).
weight(1..5).
summed(X) :- X = #sum{ Y, weight(Y) : node(Y) }.

#show summed/1.
#+end_src

**** #+NAME: Max Aggregate Example
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
3{ test(1..6) }.
the_max(X) :- X = #max { Y : test(Y) }.
#+end_src

#+RESULTS:
#+begin_example
clingo version 5.4.0
Reading from ...45c0000gn/T/babel-7DJl0a/clingo-YfPBWx
Solving...
Answer: 1
test(1) test(2) test(3) the_max(3)
Answer: 2
test(1) test(2) test(4) the_max(4)
Answer: 3
test(1) test(3) test(4) the_max(4)
Answer: 4
test(2) test(3) test(4) the_max(4)
Answer: 5
test(1) test(2) test(3) test(4) the_max(4)
SATISFIABLE

Models       : 5+
Calls        : 1
Time         : 0.014s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.014s
#+end_example

*** Pooling
#+NAME: Pooling Examples
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
test(a,b,c;d,e,f).

grid((1;2;3),(4;5;6)).
alt_grid(X,Y) :- X=(1;2;3), Y=(1;2;3).
#+end_src

#+RESULTS: Pooling Examples
#+begin_example
clingo version 5.4.0
Reading from ...45c0000gn/T/babel-7DJl0a/clingo-3izJKQ
Solving...
Answer: 1
alt_grid(3,3) alt_grid(2,3) alt_grid(1,3) alt_grid(3,2) alt_grid(2,2) alt_grid(1,2) alt_grid(3,1) alt_grid(2,1) alt_grid(1,1) test(a,b,c) test(d,e,f) grid(1,4) grid(2,4) grid(3,4) grid(1,5) grid(2,5) grid(3,5) grid(1,6) grid(2,6) grid(3,6)
SATISFIABLE

Models       : 1
Calls        : 1
Time         : 0.007s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.007s
#+end_example

*** Condition literals / Set notation
#+NAME: Condition literal example
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
person(jane;john).
available(X) :- person(X).
meet :- available(X) : person(X).
% Expands to:
%meet :- available(jane), available(john).

rule_side(X, Y) : person(X) :- Y=2.

#+end_src

#+RESULTS: Condition literal example
#+begin_example
clingo version 5.4.0
Reading from ...45c0000gn/T/babel-7DJl0a/clingo-YChP2Y
Solving...
Answer: 1
person(jane) person(john) available(jane) available(john) meet rule_side(john,2)
Answer: 2
person(jane) person(john) available(jane) available(john) meet rule_side(jane,2)
SATISFIABLE

Models       : 2
Calls        : 1
Time         : 0.004s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.004s
#+end_example

*** Const
**** #+NAME: Const Example
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
#const value = 5.
a(value).
#+end_src

#+RESULTS:
#+begin_example
    clingo version 5.4.0
    Reading from ...45c0000gn/T/babel-7DJl0a/clingo-vjJ1iL
    Solving...
    Answer: 1
    a(5)
    SATISFIABLE

    Models       : 1
    Calls        : 1
    Time         : 0.001s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
    CPU Time     : 0.001s
#+end_example

*** Display                                                                   :syntax:
**** #+NAME: Display examples
#+begin_src clingo :results output
a. b. c.
test(X,Y) :- X = a, Y = b.

%%use #show, and specify predicate and arity:
#show a/0.
#show test/2.

#+end_src

** Heuristics                                                                   :guidelines:
only atoms appearing in some head can appear in answer sets.

there are no answer sets that satisfy all literals in integrity constraint.
thus you are defining situations you don't want.

Try not to use Or: "|"

#minimize optimize a set

*** Safety                                                                      :safety:
gringo expects rules to be safe.
ALL VARIABLES that appear in a rule have to appear in some POSITIVE LITERAL
in the body, thus binding the variable to some existing constant.

** CLI Usage:                                                                   :reference:
clingo -Wall -n 1 --rand-freq=0.5 --verbose=3 test_map.lp
clingo -n 100 --restart-on-model --heu=vsids --rand-freq=0.01
clingo --time-limit=10 ...

clingo -V -o text -W all --keep-facts --reify-steps --mode=gringo file.lp


*** CLI JSON                                                                    :json:
clingo -outf=2 -n5 * > *.out
*** Exit Codes                                                                  :exit_codes:cli:
Based  on [[https://www.mat.unical.it/aspcomp2013/files/aspoutput.txt][ASP Output]]

Solvers produce output using two channels:
exit codes and
standard output.

Exit codes are used primarly to distinguish succesful runs from
unsuccesful ones; in case a run was successful, the exit code provides
semantic information about the run.  On the other hand, standard output
is used to report answer(s) to the given problem instance, e.g.,
solutions to problems, enumerations thereof, etc.  Solvers may write
warnings, statistics, debug and any additional information on stdout
using comment lines.

**** Output of an Answer Set Solver *
|--------------+-------------------------------------------------------------------------------|
| Delimiter    | Meaning                                                                       |
|--------------+-------------------------------------------------------------------------------|
| ANSWER       | Solution found, next line(s) contains answer (+ costs)                        |
|--------------+-------------------------------------------------------------------------------|
| COST         | The cost of the solution in the previous line                                 |
|--------------+-------------------------------------------------------------------------------|
| INCONSISTENT | Program is inconsistent                                                       |
|--------------+-------------------------------------------------------------------------------|
| UNKNOWN      | No solution has been found yet                                                |
|--------------+-------------------------------------------------------------------------------|
| OPTIMUM      | The solution preceding and the solutions succeeding this delimiter are optima |
|--------------+-------------------------------------------------------------------------------|
| %            | The rest of the line is a uninterpreted comment                               |
|--------------+-------------------------------------------------------------------------------|

**** Exit Code Bit Encoding
Each exit code represents a possibly successful run of a
solver/grounder: based on the exit status, the end user should be able
to answer decision problems without parsing the output, or decide
whether something went wrong or no solution could be found.

Exit codes must fit within the lowest 8 bits of an integer.

The status values 10 and 20 encode satisfiable and unsatisfiable instances.

This gives the following bit patterns for satisfiable and unsatisfiable
runs: 00001010 resp. 00010100.  Furthermore, SAT/QBF solvers may exit
without a known solution (e.g., when they have hit the time/memory
limit), but their exit status do not agree with these kind of runs.

As ASP solvers usually implement many different computational problems,
three exit codes are not enough to give us all information on the exit
status of a solver.  For this reason, we use the following bit scheme to
encode the status of a ground/solver run.

|-------+-------+--------+---------+-------+---------+-------+-------|
| bit 7 | bit 6 | bit 5  | bit 4   | bit 3 | bit 2   | bit 1 | bit 0 |
|-------+-------+--------+---------+-------+---------+-------+-------|
| NORUN | RES   | ALLOPT | EXHAUST | SAT   | EXHAUST | SAT   | INT   |
|-------+-------+--------+---------+-------+---------+-------+-------|

NORUN signals the computation was not started. eg: Syntax error.
Thus EC is 128

INT encodes termination by signal. ie: Interrupted.

Successful grounding runs have exit code 0.

SAT bit encodes that the solver found at least one solution.

EXHAUST flag signals the solver exhaustively went through the search space.

ALLOPT flag signals all optimal solutions have been found.

RES is not specified, it is reserved for future use,
and must be set to 0 whenever INT is 0.

|-----------+-------------------------------------------------------------------------------------------|
| Exit code | Meaning                                                                                   |
|-----------+-------------------------------------------------------------------------------------------|
|         1 | Run interrupted: No solution has been found so far                                        |
|-----------+-------------------------------------------------------------------------------------------|
|        10 | Program is consistent / some consequences exist / query is true                           |
|-----------+-------------------------------------------------------------------------------------------|
|        11 | Run interrupted: Program is consistent / some consequences exist                          |
|-----------+-------------------------------------------------------------------------------------------|
|        20 | Program is inconsistent / query is false                                                  |
|-----------+-------------------------------------------------------------------------------------------|
|        30 | Program is consistent, all possible solutions/consequences enumerated / some optima found |
|-----------+-------------------------------------------------------------------------------------------|
|        31 | Run interrupted: Program is consistent / some optima found                                |
|-----------+-------------------------------------------------------------------------------------------|
|        62 | Program is consistent / all possible optima found                                         |
|-----------+-------------------------------------------------------------------------------------------|
|       128 | Syntax error / command line arguments error                                               |
|-----------+-------------------------------------------------------------------------------------------|

The following table summarises the expected behaviour of a solver when
interrupted by one of the following (standard) termination signals:

|-------------+------------------+---------------------------------+-------------|
| Reason      | Default action   | Expected action                 | Description |
|-------------+------------------+---------------------------------+-------------|
| SIGHUP (1)  | exit(129)        | exit(1) or exit(11) or exit(31) | kill -HUP   |
| SIGINT (2)  | exit(130)        | exit(1) or exit(11) or exit(31) | Ctrl-C      |
| SIGQUIT (3) | exit(131) + core | exit(1) or exit(11) or exit(31) | Ctrl-\      |
|-------------+------------------+---------------------------------+-------------|

Further signals are relevant in the context of the ASP Competition 2013.
Here, different signals encode the reason for solver termination.

|--------------+------------------+---------------------------------+-----------------------------------------------------|
| Reason       | Default action   | Expected action                 | Description                                         |
|--------------+------------------+---------------------------------+-----------------------------------------------------|
| SIGKILL (9)  | exit(137)        | cannot be changed               | sent when process(es) continue to run after timeout |
| SIGSEGV (11) | exit(139)        | exit(1) or exit(11) or exit(31) | sent when memout is reached, or programming error   |
| SIGTERM (15) | exit(143)        | exit(1) or exit(11) or exit(31) | sent at most 10 secs after timeout                  |
| SIGXCPU (24) | exit(152) + core | exit(1) or exit(11) or exit(31) | sent when timeout is reached                        |
| SIGXFSZ (25) | exit(153) + core | exit(1) or exit(11) or exit(31) | sent when max filesize is reached                   |
|--------------+------------------+---------------------------------+-----------------------------------------------------|
** Babel Usage
Clingo can be used in babel source blocks.

CLI arguments can be passed in a header:
#+HEADER: :c-n 5

Or in the src block:
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all

#+end_src

** Sandbox
***   #+NAME: Rain and Sprinklers
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
0 { rain;sprinkler;summer } 1.
%:- rain, sprinkler,summer.
wet(rain) :- rain.
wet(sprinkler) :- sprinkler.
dry :- not wet(_).
-dry :- wet(_).
%%:- not wet(_).
#+end_src

#+RESULTS:
: Syntax Error

***   #+NAME: Graph Test
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all :clingo-time-limit 10
node(a;b;c;d;e).
weight(1..3).

{ edge(X,Y,W) } :- node(X), node(Y), weight(W).

connected(A,B) :- edge(A,B,W).
connected(B,A) :- edge(A,B,W).
connected(A,C) :- connected(A,B), connected(B,C), A!=B, A!=C.


all_connected :- connected(Y,X) : node(Y), node(X), X != Y.

all_edges(X,Z3) :- node(X), Z = #count { Y : edge(X,Y,_) }, Z2 = #count{ Y : edge(Y,X,_) }, Z3=Z+Z2.
all_weights(Z) :- Z = #sum { W,X,Y : edge(X,Y,W) }.
:- all_connected.
:- edge(X,X,_).
:- edge(X,Y,_), edge(Y,X,_).
:- edge(X,Y,W), edge(X,Y,W2), W!=W2.
:- all_edges(_,E), E > 2.
:- all_edges(_,E), E = 0.

#show edge/3.
#show connected/2.
#show all_connected/0.
#show all_weights/1.
#show all_edges/2.
#+end_src

***   #+NAME: Testblock
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
{max_count(5..9)} = 1.

time(1..X) :- max_count(X).
speech(a;b;c;d;e).
start(a).
{ end(X) : speech(X) } = 1.

action(0,X,1) :- start(X), time(1).

{ action(S,X,T+1) } :- time(T), speech(X), action(_,S,T), time(T+1).
action(X,T) :- action(_,X,T).

duplicate(T) :- time(T), C=#count{ temp(X,T) : action(Y,X,T) }, C > 1.

missing :- action(_,_,T), time(T+1), not action(_,_,T+1).
missing :- time(T), duplicate(T).
missing :- end(X), T = #max { Y : time(Y) }, not action(X,T).
missing :- action(b,X,T), X != d.
missing :- action(X,X,T).
missing :- not action(_,b,_).
missing :- action(a,c,T).

:- missing.

#show end/1.
%% #show action/3.
#show missing/0.
#show action/2.
#+end_src

***   #+NAME: another test
   #+begin_src clingo :results output :clingo-models 5 :c-W all :clindo-output-debug all
time(1..5).
fruit(3).

available(X) :- fruit(X).

eat(1, X) :- time(1), fruit(X).

{eat(T, X)} :- time(T), eat(T-1, X+1).
{buy(T, X+1)} :- time(T), eat(T-1, X).
{wait(T, 0)}   :- time(T), eat(T-1, 0).


used(T) :- eat(T,_).
used(T) :- buy(T,_).
used(T) :- wait(T).


:- eat(T,_), T>5.
:- eat(_, X), X<0.
:- eat(5,_); wait(5).
:- eat(T, _), buy(T, _).
:- time(T), not used(T).

#show eat/2.
#show wait/2.
#show buy/2.
#+end_src

#+RESULTS:
#+begin_example
clingo version 5.4.0
Reading from ...45c0000gn/T/babel-7DJl0a/clingo-OZxjKu
Solving...
Answer: 1
eat(1,3) eat(2,2) eat(3,1) eat(4,0) buy(5,1)
Answer: 2
eat(1,3) eat(2,2) eat(3,1) eat(4,0) buy(5,1) wait(5,0)
SATISFIABLE

Models       : 2
Calls        : 1
Time         : 0.003s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.003s
#+end_example

*** transitions
#+NAME: transition test
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
{test(X,Y); test(Y,X)} :- X=a, Y=b.

#+end_src

#+RESULTS: transition test
#+begin_example
clingo version 5.4.0
Reading from ...45c0000gn/T/babel-7DJl0a/clingo-FbTo7f
Solving...
Answer: 1
a
Answer: 2
test(b,a) a
Answer: 3
test(a,b) a
Answer: 4
test(a,b) test(b,a) a
Answer: 5
c
SATISFIABLE

Models       : 5+
Calls        : 1
Time         : 0.748s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.004s
#+end_example

** Simple
#+NAME: Simple
#+begin_src clingo :results output :clingo-models 5 :c-W all :clingo-output-debug all
a(1..5).
#+end_src

#+RESULTS: Simple
#+begin_example
clingo version 5.5.2
Reading from ...45c0000gn/T/babel-lEnfjf/clingo-sLtqHw
Solving...
Answer: 1
a(1) a(2) a(3) a(4) a(5)
SATISFIABLE

Models       : 1
Calls        : 1
Time         : 0.002s (Solving: 0.00s 1st Model: 0.00s Unsat: 0.00s)
CPU Time     : 0.002s
#+end_example

* Links
[[https://potassco.org/][Potassco]]
