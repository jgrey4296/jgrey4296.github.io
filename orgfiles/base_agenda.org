-*- mode: org; -*-
#+STARTUP: content

"generative ai and the future of computational propaganda" - samuel woolley

* Active
** ACTIVE Blood Bind
*** [∅] bloodbind! -> structs
macro -> pattern -> entry -> profile -> store

*** [∅] pattern expansion
*** application
*** local vars
*** global vars
*** hook installation
*** reporting
*** Testing
**** start state instruction
**** map creation
**** local map creation
**** map prefixs
**** map states
**** lambda wrapping
**** metadata pairing
**** toggle
**** rebinding

** TODO librarian
- State "TODO"       from              [2024-05-23 Thu 01:57]
*** [∅] use xref and ivy-xref
https://blog.kotatsu.dev/posts/2023-10-28-emacs-ctags/
https://www.ackerleytng.com/posts/emacs-xref/
https://andreyor.st/posts/2023-09-09-migrating-from-lsp-mode-to-eglot/
https://www.gnu.org/software/emacs/manual/html_node/emacs/Xref.html
*** [∅] structs
*** [∅] add session saving
*** [∅] document
*** [∅] tests
*** [∅] bookmark search
** TODO org
*** diary jump
*** archive jump
*** journal jump
*** notes
*** projects
* Queue
** QUEUED re-add potassco to apt
https://launchpad.net/~potassco/+archive/ubuntu/stable
[[/media/john/data/github/_templates/apt/sources/potassco-ubuntu-stable-lunar.list][apt sources]]
* Doot Tasks                                           :tasks:
** homepage                                      :homepage:
*** DONE add/remove empty pelicanconf.py
*** style
** bibliography                                  :bibliography:
*** summary counts
*** twitter threads
*** DONE metadata update
*** bookmark duplicate remove
*** listings
**** list books
**** list proceedings
**** list journals

*** verify
**** wayback urls
**** check for predatory journals
**** check for predatory publishers
**** remove duplicates

*** build
**** compile main changes
1) format
2) export
3) create tex
4) compile
**** compile individuals
**** compile conferences
**** compile journals
*** tags
**** rebuild tags
**** merge tags
**** clean tags
**** build timeline for tag
**** diff tag changes
*** other
**** DONE update bookmarks
**** parse ceur
**** bib format, for plus
*** xml
**** [#B] parse and extract dblp
**** sitemaps                                   :sitemaps:
***** boingboing
***** boykiss
***** critical-distance
***** doctorow
***** federalist
***** hansard
***** journals
***** jstor
***** koster
***** media_matters
***** mit
***** news_sitemaps
***** porn
***** propublica
***** sciencedirect
***** scifi_ruminations
***** scotus_blog
***** springer
***** techdirt
***** the_nation
***** the_trace
***** variancehammer
***** ceur-ws-index.xml
***** game_philosophy.xml
***** papersindex.xml
***** paul_mcguire.xml
***** pentiment.xml
***** talks-2022.xml
***** verso.xml
**** thompson motifs
*** DONE chunker
**** DONE plus/anthology
**** DONE plus/ai_reviews
*** DONE build stubs
** maintenance
*** python env listing
*** updates
**** doom
**** blood
**** apt
**** tlmgr
**** rust
*** system setup
*** dcim
**** image hashing
**** ocr
**** duplicate detector
*** DONE version records
*** DONE tex versions
*** DONE rust version
** repo maintenance
*** workflows
*** doot
**** lint
**** test
**** collect todos
**** maintain dependencies
**** DONE bumpver
**** DONE deploy
**** DONE build pelican
**** DONE validate bibs
**** DONE validate commit msg
**** sphinx rebuild
* Datasets                                       :dataset:
** QUEUED youtube
*** Brothgar
*** Colonel_RPG
*** CrashCourse
*** DoctorSwellman
*** Extra_History
*** Feminist_Frequency
*** GDC
*** Grimith
*** IllegallySighted
*** Keith_Ballard
*** Laila_Dyer
*** Let's_Game_It_Out
*** Lister
*** LongplayArchive
*** Low_Tech_Gaming
*** Nathan's_Sandbox
*** Noah_Caldwell-Gervais
*** Plumbella
*** RenegadeConstabulary
*** SB
*** SciShow
*** Splattercatgaming
*** Stumpt
*** Super_Bunnyhop
*** TheUrsinus1
*** The_Guild_of_Awesome
*** The_Jessa_Channel
*** The_Spiffing_Brit
*** Virtual_Gaming_Library_-_VGL
*** Volx
*** World_of_Longplays
*** Worm_Girl
*** aulddragon
*** dfortae_-_Game_Reviews
*** lilsimsie
*** northernlion
*** quill18
*** rpg_crawler
*** thevoiceofdog
*** tomatoanus
** raw
*** 40k_texts
*** nyt
*** 40k_armageddon
*** HoMM_2
*** ai_war
*** albion
*** alien_isolation
*** anodyne
*** asp
*** atomic
*** avadon
*** avernum
*** balance_of_the_planet
*** baldurs_gate
*** baldurs_gate_2
*** batman_arkham
*** bbc
*** beholder
*** bester
*** bethesda
*** binding_of_isaac
*** borderlands_2
*** bot_lang
*** brunner
*** cannibal_interactive
*** cartago
*** caves_of_qud
*** ccalc
*** ceptre
*** civilization_V
*** clingo
*** clips
*** clockwork_empires
*** cmu_pronounce
*** collective_knowledge
*** college_majors
*** congress_age
*** congress_resignations
*** corpora
*** cplus
*** crusader_kings_2
*** crusader_kings_3_docs
*** cultist_sim
*** daggerfall
*** darkest_dungeon
*** darklands.tar.gz
*** dawn_of_war_2
*** dawn_of_war_2_retribution
*** dblp
*** deadly_force
*** democracy_2
*** democracy_3
*** democracy_3_africa
*** dem_soc_sim
*** dendral
*** df9_community
*** df9_original
*** df_ai
*** df_hack
*** df_structures
*** dins_curse
*** disco_elysium
*** discworld
*** distant_worlds
*** dolphins
*** domestic_violence
*** dont_starve
*** dragon_age
*** drools
*** drug_use_by_age
*** dungeon_keeper_2
*** dungeon_of_the_endless
*** dwarf_fortress_classic
*** dwarf_fortress_steam
*** eisbot
*** election_deniers
*** encounter_editor
*** eulas
*** europa_universalis_3
*** europa_universalis_4
*** excessive_force
*** exes
*** facade
*** facebook_community_standards
*** fallout_1
*** fallout_2
*** fallout_2_scripts
*** fallout_3
*** fallout_4_dialog
*** fallout_4_dialogue_tables
*** fallout_dialogs
*** fallout_new_vegas
*** fallout_nv_telemetry
*** fallout_shelter
*** fear
*** firewatch
*** flying_etiquette_survey
*** garrys_mod
*** gemrot
*** geneforge
*** glitch_assets
*** gossip
*** gratuitous_space_battles
*** gratuitous_space_battles_2
*** gratuitous_tank_battles
*** hate_crimes
*** hitman
*** holodeck
*** immerse
*** inquisitor
*** instal
*** invisble_inc
*** jacamo
*** jason
*** java_stdlib
*** kantrowitz
*** kentucky_route_zero
*** king_dragon_pass
*** king_james_bible
*** last_federation
*** la_police_killings
*** le_guin
*** little_big_adventure
*** little_big_adventure_2
*** mad
*** maia
*** majesty2
*** maop_book
*** marriage
*** mars
*** mass_effect
*** mass_effect_2
*** mass_effect_plot_database
*** micropolis
*** moise
*** monroe
*** morrowind
*** most_common_name
*** neverwinter_nights_2
*** nltk
*** northern_lion
*** oblivion
*** obscenity
*** omnibots
*** openxcom
*** opera_omnia
*** opinion_lexicon
*** oxenfree
*** oxygen_not_included
*** papers_please
*** pathologic
*** pddl
*** pentiment
*** pillars_of_eternity
*** planescape
*** police_deaths
*** police_killings
*** police_locals
*** prison_architect
*** problem_solvers
*** prompter
*** prom_week
*** prom_week_dialog
*** prom_week_level_trace
*** psf_bylaws
*** redshirt
*** reigns
*** religion_survey
*** repeated_phrases_gop
*** resignations
*** rimworld
*** rimworld_decompiled
*** roberts_rules
*** schemas
*** scotus
*** scribblenauts
*** shadowrun_chronicles
*** shadowrun_dragonfall
*** shadow_of_mordor
*** simcity_2000
*** simhealth
*** simulation_model
*** sir_you_are_being_hunted
*** skyrim
*** skyrim_ai_overhaul
*** slave_trade
*** soar_agents
*** soar_pddl
*** social_evolution
*** stalker_pripyat
*** stardew
*** stasis
*** state_union
*** stellaris
*** stellaris_list
*** stop_and_frisk
*** streets_of_rogue
*** subsurface_circular
*** sunless_sea
*** switchboard_corpus
*** syndicate
*** system_shock_2
*** tacoma
*** talespin
*** terrorism
*** theme_hospital
*** the_counted
*** the_escapists
*** the_guild_2
*** the_sims_3
*** the_sims_4
*** the_sims_medieval
*** the_witcher_1
*** the_witcher_2
*** the_witcher_3
*** the_wolf_among_us
*** thief
*** thompson_motifs
*** torchlight_2
*** tracery_grammars
*** tropico
*** twine
*** tyranny
*** ultima_ratio_regum
*** unhrd
*** unisex_names
*** unrest
*** uscode
*** us_weather_history
*** valley_without_wind_1
*** valley_without_wind_2
*** verbnet
*** verbs
*** versu
*** victoria_2
*** vtmb
*** vtmb_mod_guide
*** vtmb_sdk
*** vtmb_unpatch
*** wasteland_2
*** witcherscript
*** wordlist
*** wordnet
*** xcom_2
*** xcom_2_community_highlander
*** xcom_apocalypse
*** xcom_tftd
*** xcom_ufod
*** xcom_w_wotc
*** xenobloom
*** yoda_stories
*** z3
** crawled
*** arcen
*** binding_of_isaac
*** burn_notice
*** caves_of_qud
*** dota
*** dragon_age
*** dwarf_devlogs
*** dwarf_fortress
*** dwarf_vignettes
*** elder_scrolls
*** facebook
*** failbetter
*** fallout
*** gladia_bots
*** klei
*** papers_please
*** paradox
*** pathologic
*** pillars_of_eternity
*** rimworld
*** spyparty
*** stardew_valley
*** tf2
*** the_sims
*** tropico
*** trump_timeline
*** wow_patches
*** wow_quests
*** zero_punctuation
** dblp
** twitter :needs-parsing:
** soar :not-integrated:
** sim refinery :not-integrated:
** rma metadata :not-integrated:
** dft transport org charts :not-integrated:
https://www.gov.uk/government/publications/department-for-transport-and-ndpb-structure-charts-organisational-and-salary-disclosure-data
** dow2 mod tools :not-integrated:
** hansard archive
https://www.hansard-archive.parliament.uk/
** whoismakingnews :not-integrated:
https://www.whoismakingnews.com/#source-data
** folklore :not-integrated:
** csharp spec
https://github.com/dotnet/csharplang
https://github.com/dotnet/csharplang/tree/main/meetings
* Doot                                           :doot:
** Actions                                       :actions:
*** actions don't bother to run if the keys they return are already present
*** add postbox decorators like keys
*** create a pandas/seaborn/matplotlib chart
***** create subclass actions: artifactReader, artifactWriter
*** [#A] job actions
#+NAME: example
#+begin_src toml :results output
[[tasks.example]]
name = "builder"
ctor = "job"
actions = [
        {do="job.walk", roots_="roots", exts_="exts", update_="files"},
        {do="job.namer",          from_="files", update_="names"},
        {do="job.expand",         from_="files", base="example::base", update_="subtasks"},
        {do="job.limit",          from_="files", count=20, update_="files"},
        {do="inject:shadow_path", from_="subtasks", fpath="fpath" }
        {do="job.queue",          from_="subtasks"},
]
#+end_src


**** expander
**** matcher
**** DONE walker
**** DONE limiter
**** DONE setup
**** DONE shadower
**** DONE subtasker
**** chaining
*** predicate/skip tests
staleness, recency, size, contains, hashcmp...
*** regex filter shell action to replace called sed
*** shell action fail handler
*** shell output redirection
*** task on-fail actions
*** QUEUED [#B] test postbox
*** DONE DootKey action decorator
#+NAME: example
#+begin_src python :results output
	@DootKeyWrap.path("from", as="different")
    @DootKeyWrap.expand("target")
    @DootKeyWrap.redirect("update_")
    def an_action(spec, state, different, target, update):
        # do stuff
        return { update : target }
#+end_src

would allow automatic annotation for stubbing,
type declarations,

for multiples:?
#+begin_src python
  @DootKeyWrap.paths("from", "to", "other")
  def an_action(spec, state, from, to, other):
      pass
#+end_src

get spec args:
#+begin_src python
  @DootKeyWrap.args
  def an_action(spec, state, args):
      pass
#+end_src

typechecking:
#+begin_src python
  @DootKeyWrap.type("db", type_=BibtexDataBase)
  def an_action(spec, state, db:BibTexDataBase):
      pass
#+end_src

require it be in the spec/state,
or require a return
#+begin_src python
  @DootKeyWrap.require("update_")
  @DootKeyWrap.returns("val")
  def an_action(spec, state):
      pass
#+end_src
*** DONE write protection
** Commands                                      :commands:
*** here command
*** help command print toml cli's separate
*** help command add mixin's as targets
*** locs_cmd print matches
*** locs_cmd print by source
*** stub templates registration / env var location
*** locs command includes metadata
** DBLP                                          :dblp:
*** ISSNs
**** Journal of Political Economy: 00223808
https://www.jstor.org/journal/jpoliecon

**** AI Magazine: 2371-9621, 0738-4602
https://dblp.org/db/journals/aim/index.html

**** Artificial Intelligence: 0004-3702
https://dblp.org/db/journals/ai/index.html

**** JASSS: 1460-7425
https://dblp.org/db/journals/jasss/index.html

**** computers in human behavior: 0747-5632
https://dblp.org/db/journals/chb/index.html

**** ACM Transactions on Programming Languages and Systems (TOPLAS) : 0164-0925, 1558-4592
https://dblp.org/db/journals/toplas/index.html

**** Foundations and Trends in Programming Languages: 2325-1107, 2325-1131
https://dblp.org/db/journals/ftpl/index.html

**** Journal of Programming Languages: 0963-9306
https://dblp.org/db/journals/jpl/index.html

**** Organization Science: 1047-7039, 1526-5455
https://dblp.org/db/journals/orgsci/index.html

**** International Journal of Human-Computer Interaction: 1044-7318, 1532-7590
https://dblp.org/db/journals/ijhci/index.html

*** Proceedings

**** ACM-SIGACT Symposium on Principles of Programming Languages (POPL)
https://dblp.org/db/conf/popl/index.html

**** ACM-SIGPLAN Symposium on Programming Language Design and Implementation (PLDI)
https://dblp.org/db/conf/pldi/index.html

**** History of Programming Languages (HOPL)
https://dblp.org/db/conf/hopl/index.html

**** Language Design and Programming Methodology
https://dblp.org/db/conf/ldpm/index.html

**** Workshop on Evaluation and Usability of Programming Languages and Tools (PLATEAU)
https://dblp.org/db/conf/plateau/index.html

**** Symposium on Programming Languages and Software Tools (SPLST)
https://dblp.org/db/conf/splst/index.html
** Dootle                                        :dootle:
*** cmds
**** pre-commit yaml stub
*** actions                                      :actions:
**** dot
**** downloader
**** ocr
**** pdf
**** plantuml
**** xml
**** rng
**** calender write
**** csv read / write
*** android
*** bibtex
**** middlewares
***** ideal stemmer
***** library location enforcer
***** field lowercaser
***** year checker
***** title split
***** output name formatting
***** ISBN formatting
***** pdf metadata application
***** Url way-backer / checker
***** &amp; -> \&
***** reporters - author/editor counts, year entries, types, entries with files
***** journal/booktitle caps normalization
***** warn on missing doi/tags/url
***** DONE bibtex metadata task
*** bookmarks
**** alchemy fns

*** epub
**** compile
**** split

*** godot
*** latex
*** python
**** DONE increment version
**** DONE pip build
**** local install
**** pipreqs
**** code line count
**** coverage
*** sphinx
**** build
**** serve
*** pelican
*** spiders
**** tests
**** locations integration
*** tags
**** clean

*** encryption
*** gradle
*** clingo

*** Twitter archive processing
*** org -> html
*** html -> epub** Experiments                   :experiment:
*** TDMQ option instead of individual task listing
*** floweaver                                    :add:
https://github.com/ricklupton/floweaver

*** DONE isbn
https://github.com/JNRowe/pyisbn
https://github.com/WhyNotHugo/python-barcode
https://github.com/TorKlingberg/isbn_hyphenate
*** railroad diagrams
https://github.com/tabatkins/railroad-diagrams
*** readthedocs
https://docs.readthedocs.io/en/stable/
*** quote images -> text
*** wayback
https://akamhy.github.io/waybackpy/
*** control
**** date tracker
** Mixins                                        :mixins:
*** runner fail handler
*** KILL job : generate tasks from postbox entries
*** KILL task setup/cleanup dependency mixin
*** DONE job pattern matcher
** Other
*** QUEUED logging secret filter
*** refactor doot log setup to jgdv
*** make dootkey resolution order explicit
mamba goes: RCfile -> env -> cli -> api
https://mamba.readthedocs.io/en/latest/user_guide/configuration.html

*** active_when conditions
*** backup list cache
****** make jobs resumable
*** cli target lister
*** date tracker
*** [#A] doot memory guard
possibly use https://psutil.readthedocs.io/en/latest/
#+NAME: memory
#+begin_src python :results output
	def memory():
    """
    Get node total memory and memory usage
      from https://stackoverflow.com/questions/17718449/
    """
    with open('/proc/meminfo', 'r') as mem:
        ret = {}
        tmp = 0
        for i in mem:
            sline = i.split()
            if str(sline[0]) == 'MemTotal:':
                ret['total'] = int(sline[1])
            elif str(sline[0]) in ('MemFree:', 'Buffers:', 'Cached:'):
                tmp += int(sline[1])
        ret['free'] = tmp
        ret['used'] = int(ret['total']) - int(ret['free'])
    return ret
#+end_src


*** read/write as implicit dependencies
*** task name params
so "a.group::task.{arg=val}"?
*** same task different args
*** staleness / date checking
*** Task Runners Feature Comparison
push / pull
declarative, imperative

**** Ansible
https://en.wikipedia.org/wiki/Ansible_(software)
https://access.redhat.com/documentation/en-us/red_hat_ansible_automation_platform/2.4

:pros:

:END:
:cons:

:END:
**** Ant
https://ant.apache.org/manual/index.html

:concepts:
:END:

:pros:
- stdlib
:END:
:cons:
- java
- xml
:END:
**** Cargo
https://doc.rust-lang.org/cargo/

:pros:

:END:
:cons:

:END:
**** CMake
https://cmake.org/documentation/

:pros:

:END:
:cons:

:END:
**** Collective Knowledge
https://cknowledge.io/docs/

:pros:

:END:
:cons:

:END:
**** Common Workflow Language
https://www.commonwl.org/
https://www.commonwl.org/user_guide/

:pros:

:END:
:cons:
- yaml
:END:

#+begin_src cwl
cwlVersion: v1.0
class: CommandLineTool
baseCommand: echo
stdout: output.txt
inputs:
  message:
    type: string
    inputBinding:
      position: 1
outputs:
  output:
    type: stdout

#+end_src

**** Doit
https://pydoit.org/contents.html

:pros:
- just python
:END:
:cons:
- relies on raw dicts

:END:

#+begin_src python
  def task_do_something():
      # Setup code here

      # Task Spec:
      return {
          'actions'  : [...],
          'file_dep' : [...],
          'targets'  : [...],
          }
#+end_src

**** Gradle
https://gradle.org/

:concepts:
- settings script
- build script
- project
- subproject
- actionable tasks
- lifecycle tasks
- plugins
- artifact
- capability
- component
- configuration
:END:


:pros:
- plugins
- daemon
:END:
:cons:
- groovy
- gradlew
- unclear syntax
- documentation
- constrained to jvm projects
:END:
**** Grunt
https://gruntjs.com/

:concepts:
- package.json
- gruntfile
- alias tasks
- multi tasks
- basic tasks
- custom tasks
:END:


:pros:
- plugins
:END:
:cons:
- javascript
:END:

#+begin_src javascript
 module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    pkg: grunt.file.readJSON('package.json'),
    uglify: {
      options: {
        banner: '/*! <%= pkg.name %> <%= grunt.template.today("yyyy-mm-dd") %> */\n'
      },
      build: {
        src: 'src/<%= pkg.name %>.js',
        dest: 'build/<%= pkg.name %>.min.js'
      }
    }
  });

  // Load the plugin that provides the "uglify" task.
  grunt.loadNpmTasks('grunt-contrib-uglify');

  // Default task(s).
  grunt.registerTask('default', ['uglify']);

};
#+end_src

**** Gulp
https://gulpjs.com/

:concepts:
- gulpfile
- tasks : async functions
- public tasks
- private tasks
:END:


:pros:
- combinator based
:END:
:cons :
- javascript
:END:

#+begin_src javascript
function defaultTask(cb){
    // do stuff
    cb();
}

exports.default = defaulTask
#+end_src

**** Scrapy
https://scrapy.org/

:concepts:
- spiders
- middleware
- pipeline
- runner
- contracts
:END:

:dataflow:
1) The Engine gets the initial Requests to crawl from the Spider.
2) The Engine schedules the Requests in the Scheduler and asks for the next Requests to crawl.
3) The Scheduler returns the next Requests to the Engine.
4) process_request through downloader middlewares,
5) download.
6) process_response through downloader middlewares.
7) process_spider_input through spider middlewares.
8) process_spider_output of new Requests and scraped items.
9) The Engine sends processed items to Item Pipelines, and send processed Requests to the Scheduler and asks for possible next Requests to crawl.
10) The process repeats (from step 3) until there are no more requests from the Scheduler.
:END:


:pros:
- non-blocking,
- modular
:END:
:cons:
- overrules logging
:END:


**** Twisted
**** Jenkins
https://www.jenkins.io/doc/
https://www.jenkins.io/doc/book/pipeline/syntax/

:concepts:
- jenkinsfile
- pipelines
- sections
- directives
- steps
- agents
:END:


:pros:
- can be declarative or scripted
:END:
:cons:
- groovy
:END:

#+begin_src jenkins
pipeline {
    agent any
    options {
        // Timeout counter starts AFTER agent is allocated
        timeout(time: 1, unit: 'SECONDS')
    }
    stages {
        stage('Example') {
            steps {
                echo 'Hello World'
            }
        }
    }
}

#+end_src
**** kubernetes
https://kubernetes.io/docs/home/

:concepts:

:END:

**** OPA
https://www.openpolicyagent.org/

:concepts:
- permissions
- agents
- roles
- policy
- rules
:END:

:pros:

:END:
:cons:
- rego
:END:


**** Luigi
https://luigi.readthedocs.io/en/stable/design_and_limitations.html

:concepts:
Target         - has .exists(), possible .open
Task           - .run(), .output(), .requires()
Parameter      -
Events         -
Event Handlers -
:END:
:pros:
- Straightforward command-line integration.
- As little boilerplate as possible.
- Focus on job scheduling and dependency resolution.
- A file system abstraction where code doesn’t have to care about where files are located.
- Atomic file system operations through this abstraction. If a task crashes it won’t lead to a broken state.
- The dependencies are decentralized. No big config file in XML.
- A web server that renders the dependency graph and does locking, etc for free.
- Trivial to extend with new file systems, file formats, and job types.
- Date algebra included.
- Lots of unit tests of the most basic stuff.
:END:
:cons:
- Its focus is on batch processing so it’s probably less useful for near real-time pipelines or continuously running processes.
- The assumption is that each task is a sizable chunk of work. While you can probably schedule a few thousand jobs, it’s not meant to scale beyond tens of thousands.
- Luigi does not support distribution of execution. When you have workers running thousands of jobs daily, this starts to matter, because the worker nodes get overloaded. There are some ways to mitigate this (trigger from many nodes, use resources), but none of them are ideal.
- Luigi does not come with built-in triggering, and you still need to rely on something like crontab to trigger workflows periodically.
:END:

#+begin_src python
  import luigi

  class MyTask(luigi.Task):
      param = luigi.Parameter(default=42)

      def requires(self) -> Task|list[Task]:
          return SomeOtherTask(self.param)

      def run(self):
          with self.output().open('w'):
              ...

      def output(self):
          return luigi.LocalTarget("/temp/foo/bar-%s.txt" % self.param)


@luigi.Task.event_handler(luidi.Event.SUCCESS)
def celebrate_success(task):
    ...
#+end_src


**** Make
https://www.gnu.org/software/make/manual/make.html

:pros:
- rule based
:END:
:cons:
- esoteric
- relies on whitespace
- complex var expansion
:END:

#+begin_src make
objects = main.o kbd.o command.o display.o \
          insert.o search.o files.o utils.o

edit : $(objects)
        cc -o edit $(objects)
main.o : main.c defs.h
        cc -c main.c
kbd.o : kbd.c defs.h command.h
        cc -c kbd.c
command.o : command.c defs.h command.h
        cc -c command.c
display.o : display.c defs.h buffer.h
        cc -c display.c
insert.o : insert.c defs.h buffer.h
        cc -c insert.c
search.o : search.c defs.h buffer.h
        cc -c search.c
files.o : files.c defs.h buffer.h command.h
        cc -c files.c
utils.o : utils.c defs.h
        cc -c utils.c
clean :
        rm edit $(objects)
#+end_src


**** Maven
https://maven.apache.org/

:pros:

:END:
:cons:

:END:
**** Meson
https://en.wikipedia.org/wiki/Meson_(software)
https://mesonbuild.com/

:pros:

:END:
:cons:

:END:
**** Nix
https://nixos.org/learn

:concepts:
- creates and composes file derivations
:END:


:pros:
:END:
:cons:

:END:
**** Rake
https://docs.seattlerb.org/rake/

:pros:

:END:
:cons:

:END:
**** Scons
https://scons.org/documentation.html
https://scons-cookbook.readthedocs.io/en/latest/

:pros:
- python
- order independent
:END:
:cons:
- documentation
- not explicit
:END:
**** SnakeMake
https://snakemake.readthedocs.io/en/stable/

:concepts:

:END:

:pros:
- reproducible
- linter
- modular
- auto install of dependencies
- tool wrappers
- cluster execution
- tabular config
- reports
- generates unit tests
- handover to other task runners
:END:
:cons:
- dsl, uncertain where python ends and snakemake begins
- top down
:END:

#+begin_src snakemake
rule bwa_map:
    input:
        "data/genome.fa",
        "data/samples/A.fastq"
    output:
        "mapped_reads/A.bam"
    shell:
        "bwa mem {input} | samtools view -Sb - > {output}"

#+end_src

**** Toil
https://toil.ucsc-cgl.org/
https://github.com/DataBiosphere/toil

:concepts:
- leader : decides jobs by traversing job graph
- job store : handles files shared between components, maintains state
- worker : temporary processes, can run on to successors
- batch system : schedules jobs
- node provisioner : creates worker nodes
- stats and logger :

- jobs : atomic unit of work
- workflow : extends job
- jobDescription : metadata
:END:


:pros:
- uses cwl, wdl, python
:END:
:cons:

:END:

#+begin_src python
from toil.common import Toil
from toil.job import Job


def helloWorld(message, memory="1G", cores=1, disk="1G"):
    return f"Hello, world!, here's a message: {message}"


if __name__ == "__main__":
    parser = Job.Runner.getDefaultArgumentParser()
    options = parser.parse_args()
    options.clean = "always"
    with Toil(options) as toil:
        output = toil.start(Job.wrapFn(helloWorld, "You did it!"))
    print(output)

#+end_src

**** WDL
https://docs.openwdl.org/en/latest/
https://github.com/openwdl/wdl
https://openwdl.org/getting-started/
https://github.com/openwdl/wdl/blob/wdl-1.1/SPEC.md

:concepts:
- workflow
- task
- call
- command
- output
:END:

:pros:

:END:
:cons:

:END:

#+begin_src wdl
workflow write_simple_file {
  call write_file
}
task write_file {
  String message
  command { echo ${message} > wdl-helloworld-output.txt }
  output { File test = "wdl-helloworld-output.txt" }
}
#+end_src
*** tracker.contains : artifact checks
*** tracker handling of adding unambiguous group-less task names
*** tracker writing/reading
*** update task spec version
#+begin_src toml :results output
[[tasks.group]]
name = "blah"
# Old:
version = "0.1"
# New:
version = {"task": "0.1", "doot": ">0.5.1", "dootle" : "<0.2.1" ... }
# and check the version on build
# similarly:
depends_on = ["another::task, 0.2.1","and::another, >0.1"]
#+end_src

*** use cli param constraints in cli parsing
*** policies
**** breaker
**** bulkhead
**** retry
**** timeout
**** cache
**** fallback
**** cleanup
**** debug
**** pretend
**** accept
*** queue cleanup task
*** symlink nonlocal task files into .tasks
*** queue tasks without groups when no ambiguity
*** ensure idempotency of tracker add_task/queue_task
*** using action annotations to modify tracker network dependencies
*** pre-run, print task plan from built network
*** cli args
currently doot/control/base_tracker.py : 243
uses match spec.source
*** boltons.priorityQueue subclass
override 'add' to call get_priority on the *task* before calling super().add
*** move task spec instantiation logic to TaskSpecFactory
*** DONE extract logctx,logcolour,logconfig to new package
added to jgdv
*** DONE fix doot.toml stubbing when pyproject.toml exists
*** DONE pre-commit print colour disabler
*** DONE refactor sname
** Corana
*** archiving
*** binary
*** json
*** metadata
*** spiders
*** swda
*** xml
* Dotnet                                         :dotnet:
* Elixir
* Emacs                                          :emacs:
** [#A] add comint-truncate-buffer to comint-output-filter-functions
** add frames ops to workspace transient
** bibtex
*** map :type -> bibtex types
*** remove empty fields
*** use spec handler for jg-bibtex-completion-display-formats
*** minimal bibtex library
to remove need for ivy-bibtex, parsebib, citeproc, org-ref
*** check bibtex uses librarian for meta retrieval
and that librarian meta retrieval is using exif
** bindings
*** wipe global map C- and M-
** Dired
*** cookiecutter
*** DONE pdftotext
*** add tesseract binding dired bindings
** doot call from toml
** experiment
*** org-brain
https://github.com/Kungsgeten/org-brain
*** agda
*** ess
*** fortran
*** ivy
*** julia
*** ledger
*** multi-cursor
*** opa
*** solidity
*** taskrunners
*** vertico
** ibuffer temp group by marked
** DONE make q in helpful work on a local stack of helpful buffers
** new eval module
** Proof general
*** repl popup instead of override window layout
** python
*** DONE refine add-import
*** add __init__.py to new dired directories if in py project
*** bots                                         :bots:
**** boards of directors
** quick doot
** org babel for chuck
* Godot                                          :godot:
** android test
*** touch detection
* JVM
** Jacamo                                        :jacamo:
* Lisp                                           :lisp:
** [#C] blood                                    :blood:
*** QUEUED Testing                               :test:
**** deferral
**** profile/module/package building
**** dag
**** logging
**** sync
**** trace
**** force terminal
**** inhibitions
**** caches
**** native compilation
**** straight setup
**** bootstraps
**** cleaning
**** cli control
*** Features                                     :feature:
**** bootstrap
**** clean
**** core
**** dag
**** deferral
**** defs
**** early-init
**** hooks
**** log
**** modules
***** package autoloads
***** setup advice
***** setup hooks
**** profile
**** report
**** stub
**** sync
**** trace
**** utils
***** advise load
**** native
**** straight
***** convert package specs to straight recipes
***** disable straights popups

*** Blood Basic Profile
**** config default
**** config disabled
**** config help
**** config search
**** config ui
**** editor buffer-nav
**** editor evil
**** editor text-manipulation
**** editor undo
**** editor window-nav
**** tools dired
**** ui helm
**** ui hydra
**** ui ibuffer
**** ui ivy
**** ui minibuffer
**** ui ophints
**** ui popup
**** lang-weakly-typed lisp-langs
**** lang-weakly-typed python

*** BLOCKED Blood Modules                        :module:blood:
**** Modules
***** config
****** bindings
****** default
****** disabled
****** help
****** linux
****** mac
****** search
****** ui
****** windows
***** editor
****** autosave
****** buffer-nav
****** evil
****** fold
****** large-files
****** tagging
****** text-manipulation
****** undo
****** window-nav
***** experimentation
***** ide
****** company
****** debugger
****** diff
****** librarian
****** minimap
****** snippets
****** support
****** version-control
****** workspaces
***** lang-data
****** csv
****** dot
****** graphql
****** json
****** logs
****** nu
****** sql
****** toml
****** xml
****** yaml
***** lang-dsl
****** acab
****** ai-and-logic
****** music
****** nix
****** qt
****** rest
****** sh
***** lang-strongly-typed
****** coq
****** dotnet-langs
****** fstar
****** haskell
****** idris
****** jvm-langs
****** lean
****** ml-langs
****** rust
***** lang-text
****** bibtex
****** inform
****** latex
****** markdown
****** org
****** plantuml
****** rst
****** web
***** lang-weakly-typed
****** erlang-vms
****** godot
****** lisp-langs
****** lua
****** python
****** ruby
***** tools
****** calendar
****** dired
****** eval
****** mail
****** pdfs
****** processes
****** term
***** ui
****** doom-ui
****** helm
****** hydra
****** ibuffer
****** ivy
****** minibuffer
****** ophints
****** popup
** carousel-minor-mode
*** add tests

*** add buffer pairing for tests
't' to shift

*** add vertical tracks
'R - [j,k]' to shift

** code-shy-minor-mode
*** add tests

** env-handling
*** add readme
*** add tests
*** shift config to ide, not python
*** generalize to handle java, erlang, etc
*** read toml
*** read pipfiles
*** add structs
** evil-escape-hook
*** edit evil repeat list

** evil-states-plus                              :evil:state:
*** cmd: ivy-state
*** bidirectional state
*** page move / browse state
*** forward state
*** backward state
*** search state
*** vis control state
*** conflict-merge
*** insert-plus
*** other-chars
*** paren
** general-insert highlighting mode
** hydra-macros                                  :macros:
*** add readme
*** add tests
*** merge with transient-macros
** key-clean                                     :binding:
** misc                                          :refactor:
*** refactor doom specific -> general

** misc-modes                                    :modes:
*** major modes
**** timeline insert
**** palette insert with colours
**** lint result mode
**** logview mode
**** godot mode
**** hexyl mode
**** pdf-meta mode
**** rawtag mode
**** timeline mode
**** coverage mode
**** cron mode
**** QUEUED definition mode
similar to wordnut-search
add/lookup timeline+definitions
**** lint result mode
**** logview mode
**** cobol-mode
**** definition-lookup: move to librarian
**** separate ai modes to new repo
***** jacamo mode
***** [#A] agentspeak mode
***** soar mode
***** ceptre mode
*** minor modes
**** doot mode
**** general insert
**** jg-company
**** librarian-tagging-helm
**** librarian-tagging-vy
**** music-minor
**** org-unit-test
**** overlay-ctrl
*** babel
**** ccalc
**** ceptre
**** clingo
**** clips
**** erlang
**** plantuml
**** soar
**** z3
*** ox-epub
** modelined                                     :modeline:
declarative modleine
https://www.gnu.org/software/emacs/manual/html_node/elisp/Mode-Line-Format.html
*** test
*** merge with hydra-macros
** project-zimmerframe
*** add structs
*** test
** spec-handling
*** document
*** add structs
*** test
*** pass symbols to spec-handling-add!
then eval them on application

** template access ivy
instead of spc y [1-7], do spc-y-ret and dynamically drill into templates repo

** transient-macros                              :macros:
* Python                                         :python:
** 40ksim
** py-timeline                                   :experiment:
https://www.gnu.org/software/gcal/manual/gcal.html
** acab
*** finish refactor and simplification
** cuty
*** update to work with doot
** instal
*** reintegrate original pytests
** python notes
*** timeit
*** trace
*** tracemalloc
*** faulthandler
*** atexit
*** gc
*** resource
*** dis
*** importlib
*** mmap
** jgdv / dejavu
utilities and things i keep writing
*** apis
**** mastodon
**** clingo
**** selenium
**** sphinx
*** cli
**** REPL
**** arg parser
*** debugging
**** dsl
**** frame helper
**** human
**** malloc
**** running debugger
**** trace helper
**** destruction
*** decorators
**** base
**** breakpoint
**** check protocol
**** dsl
**** logging
**** util
*** dsl
**** consts
**** ctors
**** funcs
**** util
*** enums
**** location
**** loop
**** task response
**** task state
*** error
*** file_formats
tex, twitter, netscape, org, timeline, tags
file hashing, tar/zip manipulation,
bookmarks, pickling
**** binary
**** bookmarks
***** bookmark
***** collection
***** netscape
**** epub
**** gif
**** graph
**** jinja
**** org
**** pdf
**** tags
***** base
***** graph
***** index
***** name
***** substitutions
**** tex
***** base
***** bib
***** envs
***** gantt
***** pdf
***** statements
***** util
**** timeline
**** twitter
**** json
**** mem map
**** metadata
**** sha256
**** tar
**** zip
*** geom
**** dcel
**** intersection
**** math
**** voronoi
*** importing
**** inspect
**** plugin loader
*** _interfaces
**** accessors
**** decorator
**** factory
**** loader
**** policy
**** singleton
*** keys
**** base
**** decorator
**** formatter
**** multikeys
**** path keys
**** simple keys
*** location
**** locations
**** toml loc
*** logging
**** colour
**** config
**** context
**** stdout capture
*** math
**** colour
**** comparison
**** easings
**** matrices
**** parabola
**** quadratic
**** quantize
**** random
**** sorting
**** umath
**** utils
*** mixins
**** enums
**** param spec
**** path manip
**** zipper
*** setup
**** asyncio
***** client
***** server
**** gtk
**** hooks
**** importing
**** main
**** pyparsing
**** setup
**** tkinter
*** spiders
**** caching
**** crawler
**** middleware
**** mixin
**** pipeline
**** spiders
*** structs
**** artifact
**** coderef
**** graphs
**** heap
**** name
**** param spec
**** proxy
**** rational time
**** rbtree
**** regex
**** rete
**** time
**** trace
**** tree
**** trie
*** testing
**** temp dir fixture
*** utils
**** chain get
**** slice
*** _types

** nominate
** QUEUED tomlguard proxies
*** first_of
*** all_of
*** flatten_on
*** match_on
** QUEUED [#C] bibtex-middlewares
*** crossref validator
*** doi handler
*** field sorter
*** hash validator
*** metadata writer
*** stack builder
*** waybacker
* Rust                                           :rust:
** rust <-> emacs
Have emacs call a rust module
http://diobla.info/blog-archive/modules-tut.html
https://github.com/jkitchin/emacs-modules
https://github.com/ubolonton/emacs-module-rs
https://phst.eu/emacs-modules.html
https://ryanfaulhaber.com/posts/first-emacs-module-rust/
** rust <-> python
Have python pass data back and forth to rust
https://codeburst.io/how-to-use-rust-to-extend-python-360174ee5819?gi=f1a56fa91873
https://docs.python.org/3/extending/building.html#building
https://docs.rust-embedded.org/book/interoperability/c-with-rust.html
https://github.com/PyO3/pyo3
https://github.com/PyO3/setuptools-rust
https://lucumr.pocoo.org/2015/5/27/rust-for-pythonistas/
https://www.maturin.rs/
* Templates                                      :templates:
** bash
** Definitions
** General Inserts                               :gen_insert:
*** general-insert : seaborn
*** general-insert : matplotlib
*** general-insert : sqlalchemy
*** general-insert : cairo
*** general-insert : construct
*** general-insert : scipy
*** general-insert : scikit-learn
*** general-insert : pyparsing
*** general-insert : networkx
*** pandas
** DONE move templates to separate repo
** nu
** themes
** DONE update project templates
* Bibliography                                    :bibliography:
** in_progress
*** ai-reviews
*** anthology
*** dijkstra
** conferences
*** alife
*** chi play
*** coG
*** ICEC
*** ToG
*** T-CIAIG
*** DONE [#A] aisb
** journals
** individuals
** favourites
** scifi
**** ac_clarke_award
**** galaxy_award
**** hugo_award
**** lambda_award
**** le_guin_award
**** nebula_award
**** nommo_award
**** pk_dick_award
**** timeline
**** world_fantasy_award.bib
** tags                                          :tag:
*** integrate new
** ebooks                                        :ebooks:
*** epubs
**** Abnett_2004_Eisenhorn_Omnibus.epub
**** Abnett_2008_Titanicus.epub
**** Aristotle_1998_Metaphysics.epub
**** Banks_1987_Consider_Phlebas_d5bab.epub
**** Banks_1987_Consider_Phlebas.epub
**** Bergson_1913_Laughter.epub
**** Bester_1981_The_Deceivers.epub
**** Bush_1945_As_We_May_Think.epub
**** Camic_2011_The_Essential_Writings_of_Thorstein_Vebl.epub
**** Card_2006_The_Cambridge_Companion_to_Simone_De_Bea.epub
**** Croshaw_2022_Will_Save_the_Galaxy_for_Food.epub
**** De_1949_The_Second_Sex.epub
**** Drucker_1998_On_the_Profession_of_Management.epub
**** Dunn_2012_The_Primarchs.epub
**** Dunn_2016_The_Silent_War.epub
**** Eberl_2008_Battlestar_Galactica_and_Philosophy.epub
**** Fadiman_2000_Ex_Libris.epub
**** Galbraith_1955_The_Great_Crash_1929.epub
**** Galbraith_1983_The_Anatomy_of_Power.epub
**** George_2005_Case_Studies_and_Theory_Development_in_t.epub
**** Miceli_2015_Expectancy_and_Emotion.epub
**** Mieville_2011_Embassytown.epub
**** Okrent_2009_In_the_Land_of_Invented_Languages_Esper.epub
**** Plato_2004_The_Laws.epub
**** Pratchett_1991_Reaper_Man.epub
**** Pratchett_1991_Witches_Abroad.epub
**** Pratchett_1992_Lords_and_Ladies.epub
**** Pratchett_1993_Men_At_Arms.epub
**** Pratchett_1994_Interesting_Times.epub
**** Pratchett_1996_Feet_of_Clay.epub
**** Pratchett_1996_Hogfather.epub
**** Pratchett_1997_Jingo.epub
**** Pratchett_2001_Thief_of_Time.epub
**** Pratchett_2002_Night_Watch.epub
**** Pratchett_2003_Monstrous_Regiment.epub
**** Pratchett_2004_Going_Postal.epub
**** Pratchett_2005_Thud_.epub
**** Pratchett_2007_Making_Money.epub
**** Pratchett_2010_I_Shall_Wear_Midnight.epub
**** Pratchett_2011_Snuff.epub
**** Pratchett_2013_Raising_Steam.epub
**** Pryor_2010_The_making_of_the_British_landscape.epub
**** Reid_2005_United_We_Stand.epub
**** Rowling_2007_Harry_Potter.epub
**** Scalzi_2005_Old_Man_s_War.epub
**** Scalzi_2022_The_Kaiju_Preservation_Society.epub
**** Szczesnik_2016_Unity_5_x_Animation_Cookbook.epub

*** erin
*** police violence
*** phil agre
** timelines
*** DONE shift to submodule
*** shift definitions to timelines repo?

* Docs
** acab
** bibliography
** blood
** config
** corana
** cuty
** QUEUED doot
readthedocs
** dootle
** homepage
*** main                                        :main:
**** 40k editions
**** isaac synergies
**** civ techtrees
**** cod mecahnics
**** QTES
**** goms
*** quotes
**** clean
*** taxonomies
**** clean
*** burn notice
**** spy facts
**** episodes
** instal
** librarian
** pelican-tomlconf
** sphinx-tomlconf
** templates
** tomlguard
* Job                                        :job:
** [#A] joinerysoft
* Done                                            :ATTACH:
:PROPERTIES:
:ID:       005ee55c-2ea8-425e-a1b0-94792272a866
:END:
* [[file:notes.org::Inbox][Notes]]
* [[file:/media/john/data/github/bibliography/bookmarks/urls.org][Links/urls]]
** Main
*** [[file:/media/john/data/github/lisp/blood/blood][Blood]]
*** [[file:/media/john/data/github/python/doot/doot][Doot]]
*** [[file:/media/john/data/github/python/tomlguard][tomlguard]]
*** [[file:~/github/python/acab][Acab]]
*** [[file:~/github/python/instal][Instal]]
*** [[file:~/github/python/corana][Corana]]
** Secondary
*** [[file:~/github/jgrey4296.github.io/wiki_/quotes][Quotes]]
*** [[file:~/github/jgrey4296.github.io/wiki_/taxonomies][Taxonomies]]
*** [[~/github/jgrey4296.github.io/wiki_/taxonomies/DSLs.org][DSLs]]
*** [[file:~/github/bibliography/main][Bibliography]]
*** [[file:~/library/twitter][Twitter Threads]]
*** [[file:~/github/jgrey4296.github.io/orgfiles/primary/research_questions.org][Research Questions]]
